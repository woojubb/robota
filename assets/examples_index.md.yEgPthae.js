import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.BDwTZuFy.js";const g=JSON.parse('{"title":"Examples","description":"","frontmatter":{},"headers":[],"relativePath":"examples/index.md","filePath":"examples/README.md"}'),t={name:"examples/index.md"};function l(p,s,r,o,h,c){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">‚Äã</a></h1><p>Comprehensive examples demonstrating all aspects of the Robota SDK.</p><h2 id="basic-examples" tabindex="-1">Basic Examples <a class="header-anchor" href="#basic-examples" aria-label="Permalink to &quot;Basic Examples&quot;">‚Äã</a></h2><h3 id="basic-conversation" tabindex="-1"><a href="./basic-conversation.html">Basic Conversation</a> <a class="header-anchor" href="#basic-conversation" aria-label="Permalink to &quot;[Basic Conversation](basic-conversation.md)&quot;">‚Äã</a></h3><p>Learn the fundamentals of Robota with simple AI conversations.</p><p><strong>Features Demonstrated:</strong></p><ul><li>OpenAI Provider setup and configuration</li><li>Simple message exchange using <code>robota.run()</code></li><li>Agent statistics and monitoring</li><li>Proper resource cleanup</li></ul><h3 id="ai-with-tools" tabindex="-1"><a href="./ai-with-tools.html">AI with Tools</a> <a class="header-anchor" href="#ai-with-tools" aria-label="Permalink to &quot;[AI with Tools](ai-with-tools.md)&quot;">‚Äã</a></h3><p>Integrate function calling capabilities with your AI agents.</p><p><strong>Features Demonstrated:</strong></p><ul><li>Function tool creation with JSON schemas</li><li>Automatic tool calling by AI agents</li><li>Tool execution results handling</li><li>Tool usage statistics</li></ul><h3 id="multi-provider-support" tabindex="-1"><a href="./multi-provider.html">Multi-Provider Support</a> <a class="header-anchor" href="#multi-provider-support" aria-label="Permalink to &quot;[Multi-Provider Support](multi-provider.md)&quot;">‚Äã</a></h3><p>Use multiple AI providers and models in a single application.</p><p><strong>Features Demonstrated:</strong></p><ul><li>OpenAI with different models (GPT-3.5, GPT-4o-mini)</li><li>Model comparison and response analysis</li><li>Independent agent instances</li><li>Provider-specific configurations</li></ul><h3 id="browser-usage-üåê" tabindex="-1"><a href="./browser-usage.html">Browser Usage</a> üåê <a class="header-anchor" href="#browser-usage-üåê" aria-label="Permalink to &quot;[Browser Usage](browser-usage.md) üåê&quot;">‚Äã</a></h3><p>Use Robota SDK in browsers, WebWorkers, and modern JavaScript frameworks.</p><p><strong>Features Demonstrated:</strong></p><ul><li>Cross-platform compatibility (Node.js, browsers, WebWorkers)</li><li>React and Vue integration examples</li><li>Secure API key management with proxy servers</li><li>Memory-based storage strategies</li><li>Browser-specific configuration and optimization</li><li>Zero breaking changes for existing Node.js code</li></ul><h2 id="advanced-features" tabindex="-1">Advanced Features <a class="header-anchor" href="#advanced-features" aria-label="Permalink to &quot;Advanced Features&quot;">‚Äã</a></h2><h3 id="team-collaboration" tabindex="-1"><a href="./team-collaboration.html">Team Collaboration</a> <a class="header-anchor" href="#team-collaboration" aria-label="Permalink to &quot;[Team Collaboration](team-collaboration.md)&quot;">‚Äã</a></h3><p>Leverage intelligent multi-agent collaboration with template-based expert selection.</p><p><strong>Features Demonstrated:</strong></p><ul><li>Automatic expert template selection</li><li>Task decomposition and delegation</li><li>Built-in specialist templates (researchers, creative ideators, etc.)</li><li>Workflow visualization and analytics</li><li>Multi-provider collaboration</li></ul><h3 id="team-templates" tabindex="-1"><a href="./team-templates.html">Team Templates</a> <a class="header-anchor" href="#team-templates" aria-label="Permalink to &quot;[Team Templates](team-templates.md)&quot;">‚Äã</a></h3><p>Use pre-built expert templates for specialized tasks.</p><p><strong>Features Demonstrated:</strong></p><ul><li>Template-based agent creation</li><li>Expert template registry</li><li>Custom template development</li><li>Optimized AI provider selection per template</li></ul><h3 id="execution-analytics" tabindex="-1"><a href="./execution-analytics.html">Execution Analytics</a> <a class="header-anchor" href="#execution-analytics" aria-label="Permalink to &quot;[Execution Analytics](execution-analytics.md)&quot;">‚Äã</a></h3><p>Monitor and analyze agent performance in real-time.</p><p><strong>Features Demonstrated:</strong></p><ul><li>Real-time performance tracking</li><li>Execution statistics and metrics</li><li>Error analysis and reporting</li><li>Memory management and optimization</li></ul><h2 id="agent-system" tabindex="-1">Agent System <a class="header-anchor" href="#agent-system" aria-label="Permalink to &quot;Agent System&quot;">‚Äã</a></h2><h3 id="agents-basic-usage" tabindex="-1"><a href="./agents-basic-usage.html">Agents Basic Usage</a> <a class="header-anchor" href="#agents-basic-usage" aria-label="Permalink to &quot;[Agents Basic Usage](agents-basic-usage.md)&quot;">‚Äã</a></h3><p>Explore the comprehensive capabilities of the unified Robota Agent system.</p><p><strong>Features Demonstrated:</strong></p><ul><li>Unified agent architecture with plugins</li><li>Real-time statistics and monitoring</li><li>Runtime configuration updates</li><li>Plugin ecosystem integration</li></ul><h3 id="agents-streaming" tabindex="-1"><a href="./agents-streaming.html">Agents Streaming</a> <a class="header-anchor" href="#agents-streaming" aria-label="Permalink to &quot;[Agents Streaming](agents-streaming.md)&quot;">‚Äã</a></h3><p>Implement real-time streaming responses for interactive applications.</p><p><strong>Features Demonstrated:</strong></p><ul><li>Real-time response streaming</li><li>Token-by-token processing</li><li>Performance optimization for streaming</li><li>Memory-efficient processing</li></ul><h2 id="specialized-features" tabindex="-1">Specialized Features <a class="header-anchor" href="#specialized-features" aria-label="Permalink to &quot;Specialized Features&quot;">‚Äã</a></h2><h3 id="session-management" tabindex="-1"><a href="./session-management.html">Session Management</a> <a class="header-anchor" href="#session-management" aria-label="Permalink to &quot;[Session Management](session-management.md)&quot;">‚Äã</a></h3><p>Manage complex conversation sessions with advanced features.</p><p><strong>Features Demonstrated:</strong></p><ul><li>Multi-session conversation management</li><li>Session persistence and restoration</li><li>Context switching between sessions</li></ul><h3 id="conversation-history" tabindex="-1"><a href="./conversation-history.html">Conversation History</a> <a class="header-anchor" href="#conversation-history" aria-label="Permalink to &quot;[Conversation History](conversation-history.md)&quot;">‚Äã</a></h3><p>Implement comprehensive conversation storage and retrieval.</p><p><strong>Features Demonstrated:</strong></p><ul><li>Memory, file, and database storage options</li><li>Conversation search and filtering</li><li>Message lifecycle management</li><li>Batch processing and optimization</li></ul><h3 id="function-calling-with-zod" tabindex="-1"><a href="./zod-function-tools.html">Function Calling with Zod</a> <a class="header-anchor" href="#function-calling-with-zod" aria-label="Permalink to &quot;[Function Calling with Zod](zod-function-tools.md)&quot;">‚Äã</a></h3><p>Create type-safe function tools using Zod schemas.</p><p><strong>Features Demonstrated:</strong></p><ul><li>Zod schema integration</li><li>Runtime type validation</li><li>Type-safe parameter handling</li><li>Schema-to-JSON conversion</li></ul><h3 id="provider-switching" tabindex="-1"><a href="./provider-switching.html">Provider Switching</a> <a class="header-anchor" href="#provider-switching" aria-label="Permalink to &quot;[Provider Switching](provider-switching.md)&quot;">‚Äã</a></h3><p>Dynamically switch between AI providers during execution.</p><p><strong>Features Demonstrated:</strong></p><ul><li>Runtime provider switching</li><li>Configuration preservation</li><li>Fallback strategies</li><li>Provider-specific optimizations</li></ul><h3 id="token-limits" tabindex="-1"><a href="./token-limits.html">Token Limits</a> <a class="header-anchor" href="#token-limits" aria-label="Permalink to &quot;[Token Limits](token-limits.md)&quot;">‚Äã</a></h3><p>Implement intelligent token management and cost control.</p><p><strong>Features Demonstrated:</strong></p><ul><li>Token usage tracking</li><li>Cost calculation and monitoring</li><li>Limit enforcement strategies</li><li>Budget management</li></ul><h3 id="mcp-integration" tabindex="-1"><a href="./mcp-integration.html">MCP Integration</a> <a class="header-anchor" href="#mcp-integration" aria-label="Permalink to &quot;[MCP Integration](mcp-integration.md)&quot;">‚Äã</a></h3><p>Connect to external tools using the Model Context Protocol.</p><p><strong>Features Demonstrated:</strong></p><ul><li>MCP client integration</li><li>External tool discovery</li><li>Protocol communication</li><li>Tool schema handling</li></ul><h3 id="module-system-integration" tabindex="-1"><a href="./module-system.html">Module System Integration</a> <a class="header-anchor" href="#module-system-integration" aria-label="Permalink to &quot;[Module System Integration](module-system.md)&quot;">‚Äã</a></h3><p>Leverage the new Plugin-Module-Separation architecture for enhanced functionality.</p><p><strong>Features Demonstrated:</strong></p><ul><li>Enhanced plugin classification system</li><li>Custom module development</li><li>Event-driven module-plugin communication</li><li>Module registry and lifecycle management</li><li>Performance monitoring across modules and plugins</li></ul><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">‚Äã</a></h2><h3 id="setup-guide" tabindex="-1"><a href="./setup.html">Setup Guide</a> <a class="header-anchor" href="#setup-guide" aria-label="Permalink to &quot;[Setup Guide](setup.md)&quot;">‚Äã</a></h3><p>Complete setup instructions for all SDK components.</p><p><strong>Covers:</strong></p><ul><li>Environment configuration</li><li>API key management</li><li>Package installation</li><li>Development setup</li></ul><h2 id="real-world-applications" tabindex="-1">Real-World Applications <a class="header-anchor" href="#real-world-applications" aria-label="Permalink to &quot;Real-World Applications&quot;">‚Äã</a></h2><p>Each example includes:</p><ul><li>‚úÖ <strong>Complete working code</strong> - Ready to run examples</li><li>‚úÖ <strong>Type safety</strong> - Full TypeScript support</li><li>‚úÖ <strong>Error handling</strong> - Robust error management</li><li>‚úÖ <strong>Best practices</strong> - Production-ready patterns</li><li>‚úÖ <strong>Performance monitoring</strong> - Built-in analytics</li><li>‚úÖ <strong>Resource management</strong> - Proper cleanup</li></ul><h2 id="running-examples" tabindex="-1">Running Examples <a class="header-anchor" href="#running-examples" aria-label="Permalink to &quot;Running Examples&quot;">‚Äã</a></h2><ol><li><p><strong>Install dependencies:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div></li><li><p><strong>Configure environment:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add your API keys</span></span></code></pre></div></li><li><p><strong>Run an example:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> examples/01-basic-conversation.ts</span></span></code></pre></div></li></ol><h2 id="example-categories" tabindex="-1">Example Categories <a class="header-anchor" href="#example-categories" aria-label="Permalink to &quot;Example Categories&quot;">‚Äã</a></h2><h3 id="by-complexity" tabindex="-1">By Complexity <a class="header-anchor" href="#by-complexity" aria-label="Permalink to &quot;By Complexity&quot;">‚Äã</a></h3><ul><li><strong>Beginner</strong>: Basic conversation, Simple tools</li><li><strong>Intermediate</strong>: Multi-provider, Team collaboration</li><li><strong>Advanced</strong>: Custom plugins, Complex workflows</li></ul><h3 id="by-use-case" tabindex="-1">By Use Case <a class="header-anchor" href="#by-use-case" aria-label="Permalink to &quot;By Use Case&quot;">‚Äã</a></h3><ul><li><strong>Chatbots</strong>: Basic conversation, Session management</li><li><strong>Research</strong>: Team collaboration, Analytics</li><li><strong>Development</strong>: Function calling, MCP integration</li><li><strong>Production</strong>: Error handling, Performance monitoring</li></ul><p>All examples are production-ready and demonstrate best practices for building scalable AI applications with Robota SDK.</p><h2 id="üöÄ-getting-started" tabindex="-1">üöÄ Getting Started <a class="header-anchor" href="#üöÄ-getting-started" aria-label="Permalink to &quot;üöÄ Getting Started&quot;">‚Äã</a></h2><h3 id="quick-setup" tabindex="-1">Quick Setup <a class="header-anchor" href="#quick-setup" aria-label="Permalink to &quot;Quick Setup&quot;">‚Äã</a></h3><ol><li><p><strong>Clone and Install</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/your-org/robota.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> robota</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div></li><li><p><strong>Environment Setup</strong>:</p></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apps/examples</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # Edit .env with your API keys</span></span></code></pre></div><ol start="3"><li><strong>Run Examples</strong>:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div></li></ol><h1 id="run-any-example" tabindex="-1">Run any example <a class="header-anchor" href="#run-any-example" aria-label="Permalink to &quot;Run any example&quot;">‚Äã</a></h1><p>npx tsx 01-basic-conversation.ts</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>## üéØ Quick Feature Overview</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### New Unified Architecture (\`@robota-sdk/agents\`)</span></span>
<span class="line"><span>The examples showcase the powerful new unified architecture:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- **Zero \`any\` Types**: Complete TypeScript safety</span></span>
<span class="line"><span>- **Plugin System**: Modular functionality with built-in plugins</span></span>
<span class="line"><span>- **Multi-Provider**: Seamless switching between OpenAI, Anthropic, Google</span></span>
<span class="line"><span>- **Advanced Analytics**: Built-in execution monitoring and performance tracking</span></span>
<span class="line"><span>- **Tool System**: Type-safe function calling with automatic schema conversion</span></span>
<span class="line"><span>- **Streaming Support**: Real-time response streaming with metadata</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### Core Capabilities Demonstrated</span></span>
<span class="line"><span></span></span>
<span class="line"><span>| Feature | Examples | Description |</span></span>
<span class="line"><span>|---------|----------|-------------|</span></span>
<span class="line"><span>| **Basic AI Chat** | 01, 10 | Simple conversations and basic setup |</span></span>
<span class="line"><span>| **Function Calling** | 02 | Tool integration and automated function calls |</span></span>
<span class="line"><span>| **Multi-Provider** | 03, 07 | OpenAI, Anthropic, Google AI provider usage |</span></span>
<span class="line"><span>| **Streaming** | 11 | Real-time response streaming |</span></span>
<span class="line"><span>| **Team Coordination** | 05, 09 | Multi-agent collaboration |</span></span>
<span class="line"><span>| **Performance Analytics** | 08, 09 | Execution monitoring and optimization |</span></span>
<span class="line"><span>| **Template Patterns** | 07 | Reusable agent configurations |</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## üîß Running Examples</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### Prerequisites</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`bash</span></span>
<span class="line"><span># Required environment variables</span></span>
<span class="line"><span>OPENAI_API_KEY=your_openai_key</span></span>
<span class="line"><span>ANTHROPIC_API_KEY=your_anthropic_key  # For multi-provider examples</span></span>
<span class="line"><span>GOOGLE_AI_API_KEY=your_google_key     # For Google AI examples</span></span></code></pre></div><h3 id="individual-examples" tabindex="-1">Individual Examples <a class="header-anchor" href="#individual-examples" aria-label="Permalink to &quot;Individual Examples&quot;">‚Äã</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Navigate to examples</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apps/examples</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Basic conversation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 01-basic-conversation.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Advanced agents features</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10-agents-basic-usage.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Streaming responses</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 11-agents-streaming.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Function calling</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 02-tool-calling.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Multi-provider comparison</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 03-multi-providers.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Agent templates</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 07-team-templates.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Performance analytics</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 08-execution-analytics.ts</span></span></code></pre></div><h3 id="run-all-examples" tabindex="-1">Run All Examples <a class="header-anchor" href="#run-all-examples" aria-label="Permalink to &quot;Run All Examples&quot;">‚Äã</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run a sequence of examples to see progression</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> examples:basic</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # Basic examples (01, 02, 10)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> examples:advanced</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Advanced examples (03, 07, 08, 11)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> examples:all</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # All examples in sequence</span></span></code></pre></div><h2 id="üé®-example-structure" tabindex="-1">üé® Example Structure <a class="header-anchor" href="#üé®-example-structure" aria-label="Permalink to &quot;üé® Example Structure&quot;">‚Äã</a></h2><p>Each example follows a consistent structure:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * XX-example-name.ts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Brief description of what this example demonstrates:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * - Key feature 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * - Key feature 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * - Key feature 3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* required imports */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@robota-sdk/agents&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dotenv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dotenv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dotenv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Example implementation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;üöÄ Example Started...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Create agents, configure providers, demonstrate features</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;‚úÖ Example Completed!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;‚ùå Error:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Cleanup resources</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="üìä-performance-considerations" tabindex="-1">üìä Performance Considerations <a class="header-anchor" href="#üìä-performance-considerations" aria-label="Permalink to &quot;üìä Performance Considerations&quot;">‚Äã</a></h2><p>The examples are optimized for learning and demonstration:</p><ul><li><strong>Minimal Token Usage</strong>: Short queries to reduce API costs</li><li><strong>Error Handling</strong>: Robust error handling and recovery</li><li><strong>Resource Cleanup</strong>: Proper cleanup to prevent memory leaks</li><li><strong>Performance Monitoring</strong>: Built-in timing and analytics</li></ul><h2 id="üîó-related-documentation" tabindex="-1">üîó Related Documentation <a class="header-anchor" href="#üîó-related-documentation" aria-label="Permalink to &quot;üîó Related Documentation&quot;">‚Äã</a></h2><ul><li><strong><a href="./../getting-started/README.html">Getting Started Guide</a></strong> - Initial setup and basic concepts</li><li><strong><a href="./../guide/core-concepts.html">Core Concepts</a></strong> - Understanding the architecture</li><li><strong><a href="./../api-reference/README.html">API Reference</a></strong> - Complete API documentation</li><li><strong><a href="./../providers/README.html">Provider Guides</a></strong> - Provider-specific documentation</li></ul><h2 id="üí°-tips-for-learning" tabindex="-1">üí° Tips for Learning <a class="header-anchor" href="#üí°-tips-for-learning" aria-label="Permalink to &quot;üí° Tips for Learning&quot;">‚Äã</a></h2><ol><li><strong>Start Simple</strong>: Begin with basic conversation example</li><li><strong>Read Comments</strong>: Each example has detailed inline comments</li><li><strong>Experiment</strong>: Modify examples to explore different configurations</li><li><strong>Check Output</strong>: Expected output is documented for each example</li><li><strong>Use TypeScript</strong>: Examples showcase full type safety benefits</li><li><strong>Monitor Performance</strong>: Use analytics examples to optimize your usage</li></ol><p>Happy coding with Robota! ü§ñ</p>`,109)]))}const k=a(t,[["render",l]]);export{g as __pageData,k as default};
