import{_ as t,c as e,o as a,ag as r}from"./chunks/framework.BDwTZuFy.js";const m=JSON.parse('{"title":"Protocols","description":"","frontmatter":{},"headers":[],"relativePath":"protocols/index.md","filePath":"protocols/README.md"}'),i={name:"protocols/index.md"};function l(s,o,n,c,d,p){return a(),e("div",null,o[0]||(o[0]=[r('<h1 id="protocols" tabindex="-1">Protocols <a class="header-anchor" href="#protocols" aria-label="Permalink to &quot;Protocols&quot;">​</a></h1><p>Robota supports various communication protocols to provide a consistent interface with AI models.</p><h2 id="supported-protocols" tabindex="-1">Supported Protocols <a class="header-anchor" href="#supported-protocols" aria-label="Permalink to &quot;Supported Protocols&quot;">​</a></h2><ul><li><a href="./model-context-protocol.html">Model Context Protocol (MCP)</a> - Standardized communication method with AI models</li><li><a href="./mcp-provider.html">MCP Provider</a> - Provider for integrating models that support Model Context Protocol</li></ul><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ul><li>Standardized message format</li><li>Consistent function calling schema</li><li>Easy switching between different AI providers</li><li>Context and state management</li><li>Extensible integration structure</li></ul>',6)]))}const h=t(i,[["render",l]]);export{m as __pageData,h as default};
