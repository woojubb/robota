import{_ as a,c as s,o as l,ag as e}from"./chunks/framework.BDwTZuFy.js";const c=JSON.parse('{"title":"개발 가이드라인","description":"","frontmatter":{},"headers":[],"relativePath":"ko/development-guidelines.md","filePath":"ko/development-guidelines.md"}'),n={name:"ko/development-guidelines.md"};function t(h,i,r,o,k,p){return l(),s("div",null,i[0]||(i[0]=[e(`<h1 id="개발-가이드라인" tabindex="-1">개발 가이드라인 <a class="header-anchor" href="#개발-가이드라인" aria-label="Permalink to &quot;개발 가이드라인&quot;">​</a></h1><p>이 문서는 Robota 프로젝트 개발 시 따라야 할 가이드라인을 제공합니다.</p><h2 id="코드-구성-원칙" tabindex="-1">코드 구성 원칙 <a class="header-anchor" href="#코드-구성-원칙" aria-label="Permalink to &quot;코드 구성 원칙&quot;">​</a></h2><h3 id="모듈-분리" tabindex="-1">모듈 분리 <a class="header-anchor" href="#모듈-분리" aria-label="Permalink to &quot;모듈 분리&quot;">​</a></h3><ul><li>각 기능은 명확히 분리된 모듈로 구현</li><li>모듈 간 의존성은 최소화하고 명시적으로 관리</li><li>코어 모듈은 특정 구현체에 의존하지 않아야 함</li></ul><h3 id="인터페이스-설계" tabindex="-1">인터페이스 설계 <a class="header-anchor" href="#인터페이스-설계" aria-label="Permalink to &quot;인터페이스 설계&quot;">​</a></h3><ul><li>명확한 인터페이스 정의</li><li>확장 가능성을 고려한 설계</li><li>일관된 네이밍 컨벤션 적용</li></ul><h2 id="런타임-및-실행-환경" tabindex="-1">런타임 및 실행 환경 <a class="header-anchor" href="#런타임-및-실행-환경" aria-label="Permalink to &quot;런타임 및 실행 환경&quot;">​</a></h2><h3 id="typescript-실행" tabindex="-1">TypeScript 실행 <a class="header-anchor" href="#typescript-실행" aria-label="Permalink to &quot;TypeScript 실행&quot;">​</a></h3><ul><li><strong>bun 사용</strong>: TypeScript 코드 실행 시 ts-node 대신 bun을 사용</li><li><strong>예시</strong>: <code>bun run script.ts</code> 형식으로 스크립트 실행</li><li>성능 및 일관성을 위해 프로젝트 전체에서 동일한 런타임 사용</li></ul><h3 id="개발-환경-설정" tabindex="-1">개발 환경 설정 <a class="header-anchor" href="#개발-환경-설정" aria-label="Permalink to &quot;개발 환경 설정&quot;">​</a></h3><ul><li>bun을 사용하여 개발 의존성 관리</li><li>스크립트 실행 및 테스트에 bun 사용</li><li>프로덕션 빌드에도 bun 사용 권장</li></ul><h2 id="mock-및-테스트-데이터-사용-규칙" tabindex="-1">Mock 및 테스트 데이터 사용 규칙 <a class="header-anchor" href="#mock-및-테스트-데이터-사용-규칙" aria-label="Permalink to &quot;Mock 및 테스트 데이터 사용 규칙&quot;">​</a></h2><h3 id="기본-원칙" tabindex="-1">기본 원칙 <a class="header-anchor" href="#기본-원칙" aria-label="Permalink to &quot;기본 원칙&quot;">​</a></h3><ul><li><strong>실제 구현 우선</strong>: 코드베이스 전체에서 Mock이나 더미 데이터 대신 실제 구현을 지향</li><li><strong>테스트 코드에서만 Mock 사용</strong>: Mock 객체와 더미 데이터는 오직 자동화된 테스트 코드에서만 사용</li><li><strong>예제 코드는 실제 구현 사용</strong>: 예제 코드는 실제 사용자가 사용할 방식과 동일하게 실제 구현을 활용</li></ul><h3 id="mock-구현-제한" tabindex="-1">Mock 구현 제한 <a class="header-anchor" href="#mock-구현-제한" aria-label="Permalink to &quot;Mock 구현 제한&quot;">​</a></h3><ul><li><code>/tests</code> 디렉토리: 테스트를 위한 Mock 구현 배치 - 테스트 실행 시에만 사용</li><li><code>/src</code> 디렉토리 및 <code>/examples</code> 디렉토리에는 Mock 구현이나 더미 데이터를 포함하지 않음</li><li>예제 코드는 간소화된 실제 구현을 사용하여 실제 상황과 유사한 환경 제공</li></ul><h3 id="mock-사용이-허용되는-경우" tabindex="-1">Mock 사용이 허용되는 경우 <a class="header-anchor" href="#mock-사용이-허용되는-경우" aria-label="Permalink to &quot;Mock 사용이 허용되는 경우&quot;">​</a></h3><ul><li>자동화된 테스트(단위 테스트, 통합 테스트)를 실행할 때</li><li>외부 API에 의존하는 테스트를 진행할 때(이 경우도 가능하면 실제 테스트 API 키 사용)</li><li>CI/CD 파이프라인에서 테스트를 실행할 때</li></ul><h3 id="예시" tabindex="-1">예시 <a class="header-anchor" href="#예시" aria-label="Permalink to &quot;예시&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ 좋은 예: 실제 구현 사용</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// /examples/mcp/mcp-example.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Client } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@modelcontextprotocol/sdk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transport);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ❌ 나쁜 예: 예제에서 Mock 사용</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// /examples/mcp/mcp-example.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MockMCPClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./__mocks__/mcp-client.mock&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mockClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MockMCPClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mockClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context);</span></span></code></pre></div><h2 id="테스트-규칙" tabindex="-1">테스트 규칙 <a class="header-anchor" href="#테스트-규칙" aria-label="Permalink to &quot;테스트 규칙&quot;">​</a></h2><h3 id="테스트-범위" tabindex="-1">테스트 범위 <a class="header-anchor" href="#테스트-범위" aria-label="Permalink to &quot;테스트 범위&quot;">​</a></h3><ul><li>모든 공개 API에 대한 단위 테스트 필수</li><li>중요 기능에 대한 통합 테스트 권장</li><li>Edge case 및 오류 처리에 대한 테스트 포함</li></ul><h3 id="테스트-구성" tabindex="-1">테스트 구성 <a class="header-anchor" href="#테스트-구성" aria-label="Permalink to &quot;테스트 구성&quot;">​</a></h3><ul><li>파일별 테스트 작성</li><li>관련 테스트는 논리적으로 그룹화</li><li>테스트는 독립적으로 실행 가능해야 함</li></ul><h2 id="문서화-규칙" tabindex="-1">문서화 규칙 <a class="header-anchor" href="#문서화-규칙" aria-label="Permalink to &quot;문서화 규칙&quot;">​</a></h2><h3 id="코드-문서화" tabindex="-1">코드 문서화 <a class="header-anchor" href="#코드-문서화" aria-label="Permalink to &quot;코드 문서화&quot;">​</a></h3><ul><li>모든 공개 API에 JSDoc 주석 포함</li><li>복잡한 알고리즘이나 비즈니스 로직에 인라인 주석 추가</li><li>예제 코드 제공</li></ul><h3 id="외부-문서" tabindex="-1">외부 문서 <a class="header-anchor" href="#외부-문서" aria-label="Permalink to &quot;외부 문서&quot;">​</a></h3><ul><li>새로운 기능은 해당 문서 업데이트</li><li>API 변경사항은 문서에 반영</li><li>중요한 변경사항은 CHANGELOG.md 업데이트</li></ul><h2 id="성능-고려사항" tabindex="-1">성능 고려사항 <a class="header-anchor" href="#성능-고려사항" aria-label="Permalink to &quot;성능 고려사항&quot;">​</a></h2><ul><li>성능에 민감한 코드 경로 식별 및 최적화</li><li>불필요한 API 호출 최소화</li><li>메모리 사용량 모니터링 및 최적화</li></ul><h2 id="보안-고려사항" tabindex="-1">보안 고려사항 <a class="header-anchor" href="#보안-고려사항" aria-label="Permalink to &quot;보안 고려사항&quot;">​</a></h2><ul><li>사용자 입력 검증</li><li>API 키와 같은 민감한 정보 보호</li><li>의존성 정기적 업데이트</li></ul><h2 id="접근성-고려사항" tabindex="-1">접근성 고려사항 <a class="header-anchor" href="#접근성-고려사항" aria-label="Permalink to &quot;접근성 고려사항&quot;">​</a></h2><ul><li>명확한 오류 메시지</li><li>로깅 및 디버깅 지원</li><li>다양한 사용자 시나리오 지원</li></ul><h2 id="콘솔-출력-및-로깅-규칙" tabindex="-1">콘솔 출력 및 로깅 규칙 <a class="header-anchor" href="#콘솔-출력-및-로깅-규칙" aria-label="Permalink to &quot;콘솔 출력 및 로깅 규칙&quot;">​</a></h2><ul><li><strong>console.log 직접 사용 금지</strong>: <code>./packages/</code> 내의 모든 TypeScript(.ts) 파일에서는 <code>console.log</code>를 직접 호출할 수 없습니다.</li><li><strong>logger 유틸리티 사용</strong>: 로그가 필요한 경우 반드시 제공되는 <code>logger</code> 유틸리티(<code>info</code>, <code>warn</code>, <code>error</code> 메서드)를 사용해야 합니다.</li><li><strong>예외 경로</strong>: <code>./apps/examples/</code> 및 <code>./scripts/</code> 경로 내의 코드에서는 <code>console.log</code> 사용이 허용됩니다.</li><li><strong>문서화 및 예제</strong>: 위 규칙을 위반하는 코드는 PR 리뷰 시 반드시 수정되어야 하며, 예제 및 스크립트 외의 모든 로그는 logger를 통해 출력되어야 합니다.</li><li><strong>logger 예시</strong>:</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { logger } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@robota-sdk/core/src/utils&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;정보 메시지&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;경고 메시지&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;에러 메시지&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,40)]))}const g=a(n,[["render",t]]);export{c as __pageData,g as default};
