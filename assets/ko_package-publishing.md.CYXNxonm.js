import{_ as e,c as i,o as s,ag as l}from"./chunks/framework.BDwTZuFy.js";const k=JSON.parse('{"title":"패키지 배포 가이드","description":"Robota SDK 패키지를 npm에 배포하는 방법","frontmatter":{"title":"패키지 배포 가이드","description":"Robota SDK 패키지를 npm에 배포하는 방법","lang":"ko-KR"},"headers":[],"relativePath":"ko/package-publishing.md","filePath":"ko/package-publishing.md"}'),t={name:"ko/package-publishing.md"};function o(h,a,n,p,d,r){return s(),i("div",null,a[0]||(a[0]=[l('<h1 id="패키지-배포-가이드" tabindex="-1">패키지 배포 가이드 <a class="header-anchor" href="#패키지-배포-가이드" aria-label="Permalink to &quot;패키지 배포 가이드&quot;">​</a></h1><p>이 가이드는 Robota SDK 패키지를 빌드하고 npm에 배포하는 방법을 설명합니다.</p><h2 id="개요" tabindex="-1">개요 <a class="header-anchor" href="#개요" aria-label="Permalink to &quot;개요&quot;">​</a></h2><p>Robota SDK는 다음과 같은 여러 패키지를 포함하는 모노레포 구조를 사용합니다:</p><ul><li><code>@robota-sdk/core</code>: 핵심 기능</li><li><code>@robota-sdk/openai</code>: OpenAI 제공자</li><li><code>@robota-sdk/anthropic</code>: Anthropic 제공자</li><li><code>@robota-sdk/mcp</code>: Model Context Protocol 제공자</li><li><code>@robota-sdk/tools</code>: 유틸리티 도구</li></ul><p>모든 패키지는 npm에서 <code>@robota-sdk</code> 스코프로 배포됩니다.</p><h2 id="사전-요구사항" tabindex="-1">사전 요구사항 <a class="header-anchor" href="#사전-요구사항" aria-label="Permalink to &quot;사전 요구사항&quot;">​</a></h2><ul><li>Node.js 18 이상</li><li>PNPM 8.0.0 이상</li><li><code>@robota-sdk</code> 조직에 접근 권한이 있는 npm 계정</li></ul><h2 id="배포-프로세스" tabindex="-1">배포 프로세스 <a class="header-anchor" href="#배포-프로세스" aria-label="Permalink to &quot;배포 프로세스&quot;">​</a></h2><p>배포 프로세스는 다음과 같은 주요 단계로 구성됩니다:</p><ol><li>패키지 빌드</li><li>docs 디렉토리에서 README 파일 복사</li><li>changesets를 사용하여 패키지 배포</li><li>git 태그 푸시</li><li>임시 README 파일 정리</li></ol><h3 id="패키지-빌드" tabindex="-1">패키지 빌드 <a class="header-anchor" href="#패키지-빌드" aria-label="Permalink to &quot;패키지 빌드&quot;">​</a></h3><p>배포하기 전에 모든 패키지가 빌드되었는지 확인합니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h3 id="changeset-생성" tabindex="-1">Changeset 생성 <a class="header-anchor" href="#changeset-생성" aria-label="Permalink to &quot;Changeset 생성&quot;">​</a></h3><p>변경 사항을 설명하고 버전 범프를 지정하는 changeset을 생성합니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span></span></code></pre></div><p>대화형 프롬프트에 따라 다음 단계를 진행합니다:</p><ol><li>포함할 패키지 선택</li><li>버전 범프 유형 선택 (patch, minor, major)</li><li>변경 사항 요약 작성</li></ol><h3 id="패키지-버전-업데이트" tabindex="-1">패키지 버전 업데이트 <a class="header-anchor" href="#패키지-버전-업데이트" aria-label="Permalink to &quot;패키지 버전 업데이트&quot;">​</a></h3><p>Changesets를 기반으로 패키지 버전을 업데이트합니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span></span></code></pre></div><p>이 명령은 다음과 같은 작업을 수행합니다:</p><ol><li>package.json 버전 업데이트</li><li>패키지 간 종속성 업데이트</li><li>CHANGELOG.md 파일 업데이트</li><li>사용된 changeset 파일 제거</li></ol><h3 id="패키지-배포" tabindex="-1">패키지 배포 <a class="header-anchor" href="#패키지-배포" aria-label="Permalink to &quot;패키지 배포&quot;">​</a></h3><p>단일 명령으로 배포 프로세스를 간소화했습니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish-packages</span></span></code></pre></div><p>이 명령은 다음 단계를 수행합니다:</p><ol><li>docs 디렉토리에서 각 패키지 디렉토리로 README 파일 복사</li><li>changesets를 사용하여 npm에 패키지 배포</li><li>원격 저장소에 git 태그 푸시</li><li>임시 README 파일 정리</li></ol><h2 id="readme-관리" tabindex="-1">README 관리 <a class="header-anchor" href="#readme-관리" aria-label="Permalink to &quot;README 관리&quot;">​</a></h2><p>README 파일은 <code>apps/docs/docs/packages</code> 디렉토리에서 중앙 집중식으로 관리됩니다. 배포 과정에서:</p><ol><li>README 파일이 패키지 디렉토리로 복사됩니다</li><li>README 파일이 포함된 패키지가 배포됩니다</li><li>패키지 디렉토리에서 임시 README 파일이 제거됩니다</li></ol><p>이 접근 방식은 문서와 npm 패키지 README 파일 간의 일관성을 보장합니다.</p><h2 id="스크립트-구현" tabindex="-1">스크립트 구현 <a class="header-anchor" href="#스크립트-구현" aria-label="Permalink to &quot;스크립트 구현&quot;">​</a></h2><p>배포 프로세스는 두 가지 주요 스크립트로 구현됩니다:</p><h3 id="copy-readme-js" tabindex="-1">copy-readme.js <a class="header-anchor" href="#copy-readme-js" aria-label="Permalink to &quot;copy-readme.js&quot;">​</a></h3><p>docs 디렉토리에서 패키지 디렉토리로 README 파일을 복사합니다.</p><h3 id="cleanup-readme-js" tabindex="-1">cleanup-readme.js <a class="header-anchor" href="#cleanup-readme-js" aria-label="Permalink to &quot;cleanup-readme.js&quot;">​</a></h3><p>배포 후 패키지 디렉토리에서 임시 README 파일을 제거합니다.</p><h2 id="문제-해결" tabindex="-1">문제 해결 <a class="header-anchor" href="#문제-해결" aria-label="Permalink to &quot;문제 해결&quot;">​</a></h2><h3 id="인증-문제" tabindex="-1">인증 문제 <a class="header-anchor" href="#인증-문제" aria-label="Permalink to &quot;인증 문제&quot;">​</a></h3><p>npm 인증 문제가 발생하는 경우:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --scope=@robota-sdk</span></span></code></pre></div><h3 id="배포-실패" tabindex="-1">배포 실패 <a class="header-anchor" href="#배포-실패" aria-label="Permalink to &quot;배포 실패&quot;">​</a></h3><p>배포가 실패하는 경우:</p><ol><li>npm에서 적절한 권한이 있는지 확인합니다</li><li>모든 changesets가 제대로 적용되었는지 확인합니다</li><li>git 작업 디렉토리가 깨끗한지 확인합니다</li></ol><h2 id="결론" tabindex="-1">결론 <a class="header-anchor" href="#결론" aria-label="Permalink to &quot;결론&quot;">​</a></h2><p>이 표준화된 프로세스를 따르면 Robota SDK 에코시스템 전반에 걸쳐 일관된 패키지 배포 및 버전 관리를 보장할 수 있습니다.</p>',48)]))}const b=e(t,[["render",o]]);export{k as __pageData,b as default};
