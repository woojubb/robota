import{_ as e,c as i,o as a,ag as n}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"Build and Deployment Guidelines","description":"","frontmatter":{},"headers":[],"relativePath":"build-and-deployment.md","filePath":"build-and-deployment.md"}'),t={name:"build-and-deployment.md"};function l(o,s,p,r,h,d){return a(),i("div",null,s[0]||(s[0]=[n(`<h1 id="build-and-deployment-guidelines" tabindex="-1">Build and Deployment Guidelines <a class="header-anchor" href="#build-and-deployment-guidelines" aria-label="Permalink to &quot;Build and Deployment Guidelines&quot;">​</a></h1><p>This document provides guidelines for build configuration and deployment processes.</p><h2 id="build-system-rules" tabindex="-1">Build System Rules <a class="header-anchor" href="#build-system-rules" aria-label="Permalink to &quot;Build System Rules&quot;">​</a></h2><h3 id="test-file-separation" tabindex="-1">Test File Separation <a class="header-anchor" href="#test-file-separation" aria-label="Permalink to &quot;Test File Separation&quot;">​</a></h3><ul><li><strong>Production Build</strong>: Test files should be excluded from production builds</li><li><strong>TypeScript Configuration</strong>: Include test files in <code>exclude</code> in <code>tsconfig.json</code></li><li><strong>Test Configuration</strong>: Use separate <code>tsconfig.test.json</code> to include test files only during test execution</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tsconfig.json - For production build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exclude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src/**/__tests__/**/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src/**/*.test.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src/**/*.test.tsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src/**/*.spec.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src/**/*.spec.tsx&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tsconfig.test.json - For testing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;extends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./tsconfig.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vitest/globals&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;include&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/**/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exclude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="type-system-management" tabindex="-1">Type System Management <a class="header-anchor" href="#type-system-management" aria-label="Permalink to &quot;Type System Management&quot;">​</a></h3><ul><li><strong>Type Location</strong>: Define types in the most appropriate location to prevent circular dependencies</li><li><strong>Type Reuse</strong>: Export common types from appropriate modules for reuse</li><li><strong>Naming Conflict Prevention</strong>: Avoid naming conflicts between <code>.d.ts</code> and <code>.ts</code> files</li></ul><h3 id="build-tool-configuration" tabindex="-1">Build Tool Configuration <a class="header-anchor" href="#build-tool-configuration" aria-label="Permalink to &quot;Build Tool Configuration&quot;">​</a></h3><ul><li><strong>vitest Configuration</strong>: Specify TypeScript configuration file for testing</li><li><strong>Build Cache</strong>: Clear cache and retry when build issues occur</li><li><strong>Type Check</strong>: Pre-validate type errors with <code>tsc --noEmit</code></li></ul><h2 id="runtime-and-execution-environment" tabindex="-1">Runtime and Execution Environment <a class="header-anchor" href="#runtime-and-execution-environment" aria-label="Permalink to &quot;Runtime and Execution Environment&quot;">​</a></h2><h3 id="typescript-execution" tabindex="-1">TypeScript Execution <a class="header-anchor" href="#typescript-execution" aria-label="Permalink to &quot;TypeScript Execution&quot;">​</a></h3><ul><li><strong>Use bun</strong>: Use bun instead of ts-node for TypeScript code execution</li><li><strong>Example</strong>: Execute scripts in <code>bun run script.ts</code> format</li><li>Use the same runtime throughout the project for performance and consistency</li></ul><h3 id="development-environment-setup" tabindex="-1">Development Environment Setup <a class="header-anchor" href="#development-environment-setup" aria-label="Permalink to &quot;Development Environment Setup&quot;">​</a></h3><ul><li>Manage development dependencies using bun</li><li>Use bun for script execution and testing</li><li>Recommend using bun for production builds as well</li></ul><h2 id="deployment-and-release-rules" tabindex="-1">Deployment and Release Rules <a class="header-anchor" href="#deployment-and-release-rules" aria-label="Permalink to &quot;Deployment and Release Rules&quot;">​</a></h2><h3 id="package-publishing-requirements" tabindex="-1">Package Publishing Requirements <a class="header-anchor" href="#package-publishing-requirements" aria-label="Permalink to &quot;Package Publishing Requirements&quot;">​</a></h3><ul><li><strong>Mandatory Deployment Script</strong>: Always use the <code>publish-packages</code> script for npm deployments<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish-packages</span></span></code></pre></div></li><li><strong>Never use direct changeset publish</strong>: Do not use <code>pnpm changeset publish</code> directly</li><li><strong>Required Pre-deployment Steps</strong>: The <code>publish-packages</code> script ensures: <ul><li>Documentation generation (<code>docs:generate</code>)</li><li>README file copying (<code>copy-readme</code>)</li><li>Proper npm publishing (<code>changeset publish</code>)</li><li>Git tag pushing (<code>push-tags</code>)</li><li>Cleanup of temporary files (<code>cleanup-readme</code>)</li></ul></li></ul><h3 id="deployment-workflow" tabindex="-1">Deployment Workflow <a class="header-anchor" href="#deployment-workflow" aria-label="Permalink to &quot;Deployment Workflow&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ✅ Correct deployment process</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # Create changeset</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish-packages</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # Complete deployment</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ❌ Incorrect - missing steps</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # Direct publish (missing README, docs, etc.)</span></span></code></pre></div><h3 id="version-management" tabindex="-1">Version Management <a class="header-anchor" href="#version-management" aria-label="Permalink to &quot;Version Management&quot;">​</a></h3><ul><li>Use semantic versioning (semver) principles</li><li>Breaking changes require minor version bumps for pre-1.0 releases</li><li>Patch releases for bug fixes and non-breaking improvements</li><li>Always create changesets with clear, concise descriptions</li></ul><h2 id="commit-and-changeset-message-guidelines" tabindex="-1">Commit and Changeset Message Guidelines <a class="header-anchor" href="#commit-and-changeset-message-guidelines" aria-label="Permalink to &quot;Commit and Changeset Message Guidelines&quot;">​</a></h2><h3 id="message-length-requirements" tabindex="-1">Message Length Requirements <a class="header-anchor" href="#message-length-requirements" aria-label="Permalink to &quot;Message Length Requirements&quot;">​</a></h3><ul><li><strong>Maximum 80 characters</strong>: All commit messages and changeset descriptions must be 80 characters or less</li><li><strong>Concise and clear</strong>: Focus on essential information only</li><li><strong>No detailed explanations</strong>: Save detailed explanations for PR descriptions or documentation</li></ul><h3 id="good-examples" tabindex="-1">Good Examples <a class="header-anchor" href="#good-examples" aria-label="Permalink to &quot;Good Examples&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ✅ Good commit messages (under 80 chars)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Remove tools re-exports from core package&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Add README files to packages for npm&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Fix circular dependency in tools&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Update build scripts for proper deployment&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ✅ Good changeset descriptions</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Remove tools re-exports from core. Import from @robota-sdk/tools instead.&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Add README.md files to packages for better npm documentation.&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Fix circular dependency between core and tools packages.&quot;</span></span></code></pre></div><h3 id="bad-examples" tabindex="-1">Bad Examples <a class="header-anchor" href="#bad-examples" aria-label="Permalink to &quot;Bad Examples&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ❌ Too long and verbose</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Remove re-export functionality from @robota-sdk/core package because it was creating confusion and circular dependencies with @robota-sdk/tools package, which violates our architectural principles&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ❌ Too detailed for changeset</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;This commit fixes the architectural issue where @robota-sdk/core was incorrectly re-exporting functionality from @robota-sdk/tools, creating confusion and circular dependencies. The change improves module separation and follows development guidelines.&quot;</span></span></code></pre></div><h3 id="changeset-creation-guidelines" tabindex="-1">Changeset Creation Guidelines <a class="header-anchor" href="#changeset-creation-guidelines" aria-label="Permalink to &quot;Changeset Creation Guidelines&quot;">​</a></h3><ol><li><strong>Be specific but brief</strong>: Mention what changed, not why</li><li><strong>Use imperative mood</strong>: &quot;Add&quot;, &quot;Remove&quot;, &quot;Fix&quot;, &quot;Update&quot;</li><li><strong>Focus on user impact</strong>: What users need to know or do</li><li><strong>One line preferred</strong>: Avoid multi-line descriptions unless absolutely necessary</li><li><strong>80-character limit</strong>: Changeset descriptions must be 80 characters or less</li></ol><h3 id="changeset-message-examples" tabindex="-1">Changeset Message Examples <a class="header-anchor" href="#changeset-message-examples" aria-label="Permalink to &quot;Changeset Message Examples&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ✅ Good changeset messages (under 80 chars)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Enhance SEO and update URLs to robota.io domain&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Add function calling support for all providers&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Fix memory leak in conversation history&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Update TypeScript to v5.3 for better performance&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ❌ Bad changeset messages (too long)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;This changeset enhances the SEO capabilities of the documentation site and updates all package URLs from the old GitHub Pages domain to the new custom domain robota.io&quot;</span></span></code></pre></div><h3 id="commit-message-format" tabindex="-1">Commit Message Format <a class="header-anchor" href="#commit-message-format" aria-label="Permalink to &quot;Commit Message Format&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Format: &lt;action&gt;: &lt;brief description&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;feat: add README files to npm packages&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fix: remove circular dependency in tools&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;refactor: simplify deployment workflow&quot;</span></span></code></pre></div>`,35)]))}const k=e(t,[["render",l]]);export{u as __pageData,k as default};
