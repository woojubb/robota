import{_ as a,c as e,o as i,ag as t}from"./chunks/framework.BDwTZuFy.js";const d=JSON.parse('{"title":"@robota-sdk/agents","description":"","frontmatter":{},"headers":[],"relativePath":"packages/agents/packages-docs.md","filePath":"packages/agents/packages-docs.md"}'),n={name:"packages/agents/packages-docs.md"};function o(r,s,l,p,g,c){return i(),e("div",null,s[0]||(s[0]=[t(`<h1 id="robota-sdk-agents" tabindex="-1">@robota-sdk/agents <a class="header-anchor" href="#robota-sdk-agents" aria-label="Permalink to &quot;@robota-sdk/agents&quot;">​</a></h1><p>The comprehensive AI agent framework that unifies conversational AI, tool execution, and plugin systems into a powerful, extensible platform.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The <code>@robota-sdk/agents</code> package is the unified core of the Robota SDK, providing a complete AI agent system with advanced capabilities for conversation management, tool execution, and extensible plugin architecture.</p><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><h3 id="🌐-cross-platform-compatibility" tabindex="-1">🌐 Cross-Platform Compatibility <a class="header-anchor" href="#🌐-cross-platform-compatibility" aria-label="Permalink to &quot;🌐 Cross-Platform Compatibility&quot;">​</a></h3><ul><li><strong>Universal Runtime</strong>: Works seamlessly in Node.js, browsers, and WebWorkers</li><li><strong>Zero Breaking Changes</strong>: Existing Node.js code runs unchanged in browsers</li><li><strong>Pure Implementation</strong>: Environment-agnostic core with browser-specific optimizations</li><li><strong>Memory Storage</strong>: Browser-compatible alternatives for file-based operations</li></ul><h3 id="🤖-agent-system" tabindex="-1">🤖 Agent System <a class="header-anchor" href="#🤖-agent-system" aria-label="Permalink to &quot;🤖 Agent System&quot;">​</a></h3><ul><li><strong>Robota Class</strong>: Complete AI agent implementation with conversation + tool system + plugin integration</li><li><strong>Stateless Service Layer</strong>: ConversationService, ToolExecutionService, ExecutionService for business logic</li><li><strong>Manager Layer</strong>: AIProviders, Tools, AgentFactory, Plugins, ConversationHistory for resource management</li><li><strong>Parallel Tool Execution</strong>: Concurrent multi-tool calling support</li></ul><h3 id="🌊-streaming-response-system" tabindex="-1">🌊 Streaming Response System <a class="header-anchor" href="#🌊-streaming-response-system" aria-label="Permalink to &quot;🌊 Streaming Response System&quot;">​</a></h3><ul><li><strong>Real-time Streaming</strong>: Full streaming support across all AI providers</li><li><strong>Modular Architecture</strong>: Separate streaming/parsing logic for each provider</li><li><strong>Provider Support</strong>: OpenAI, Anthropic, Google with dedicated stream handlers</li><li><strong>File Size Optimization</strong>: Modular design keeps files under 150 lines</li></ul><h3 id="🔧-tool-system" tabindex="-1">🔧 Tool System <a class="header-anchor" href="#🔧-tool-system" aria-label="Permalink to &quot;🔧 Tool System&quot;">​</a></h3><ul><li><strong>ToolRegistry</strong>: Schema storage and validation system</li><li><strong>Function Tools</strong>: Zod schema-based function tool implementation</li><li><strong>OpenAPI/MCP Support</strong>: Basic structure for extensibility</li><li><strong>Tool State Management</strong>: Registration, deregistration, and query functionality</li></ul><h3 id="🔌-plugin-system" tabindex="-1">🔌 Plugin System <a class="header-anchor" href="#🔌-plugin-system" aria-label="Permalink to &quot;🔌 Plugin System&quot;">​</a></h3><p>Eight core plugins providing lifecycle hooks and extensibility:</p><ul><li><strong>ConversationHistoryPlugin</strong>: Conversation storage (memory/file/database)</li><li><strong>UsagePlugin</strong>: Usage statistics collection (calls, tokens, costs)</li><li><strong>LoggingPlugin</strong>: Operation logging (Console/File/Remote with environment control)</li><li><strong>PerformancePlugin</strong>: Performance metrics (response time, memory, CPU)</li><li><strong>ErrorHandlingPlugin</strong>: Error logging, recovery, and retry handling</li><li><strong>LimitsPlugin</strong>: Token/request limits (Rate limiting, cost control)</li><li><strong>EventEmitterPlugin</strong>: Tool event detection and propagation</li><li><strong>WebhookPlugin</strong>: Webhook notifications for external systems</li></ul><h3 id="🗂️-conversation-history-system" tabindex="-1">🗂️ Conversation History System <a class="header-anchor" href="#🗂️-conversation-history-system" aria-label="Permalink to &quot;🗂️ Conversation History System&quot;">​</a></h3><ul><li><strong>Unified Architecture</strong>: Complete integration of Core package&#39;s conversation system</li><li><strong>Multiple Implementations</strong>: SimpleConversationHistory, PersistentSystemConversationHistory</li><li><strong>Session Management</strong>: ConversationSession with duplicate prevention + API conversion</li><li><strong>Type Safety</strong>: Complete type system with JSDoc, type guards, and factory functions</li></ul><h3 id="🤝-team-collaboration-system" tabindex="-1">🤝 Team Collaboration System <a class="header-anchor" href="#🤝-team-collaboration-system" aria-label="Permalink to &quot;🤝 Team Collaboration System&quot;">​</a></h3><ul><li><strong>TeamContainer Integration</strong>: Full agents standard migration with getStats support</li><li><strong>Execution Tracking</strong>: Task completion, execution time, and agent creation metrics</li><li><strong>Multi-language Examples</strong>: Working team collaboration examples in English and Korean</li><li><strong>Test Coverage</strong>: Comprehensive unit tests for team functionality</li></ul><h3 id="🔌-ai-provider-architecture" tabindex="-1">🔌 AI Provider Architecture <a class="header-anchor" href="#🔌-ai-provider-architecture" aria-label="Permalink to &quot;🔌 AI Provider Architecture&quot;">​</a></h3><ul><li><strong>Provider-agnostic Interface</strong>: Universal message system across all providers</li><li><strong>Complete Separation</strong>: Independent provider packages with unidirectional dependencies</li><li><strong>Native Type Usage</strong>: Each provider uses SDK-native types internally</li><li><strong>Tool Calling Support</strong>: Infinite loop prevention and proper content handling</li></ul><h3 id="🧪-testing-system" tabindex="-1">🧪 Testing System <a class="header-anchor" href="#🧪-testing-system" aria-label="Permalink to &quot;🧪 Testing System&quot;">​</a></h3><ul><li><strong>Comprehensive Coverage</strong>: 82 total tests (Agents 76 + Team 6)</li><li><strong>Component Testing</strong>: Core components, managers, services, and team functionality</li><li><strong>Integration Testing</strong>: Full workflow testing with real provider interactions</li><li><strong>Mock Support</strong>: Proper mocking for isolated unit testing</li></ul><h2 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h2><h3 id="core-abstraction-layers" tabindex="-1">Core Abstraction Layers <a class="header-anchor" href="#core-abstraction-layers" aria-label="Permalink to &quot;Core Abstraction Layers&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BaseAgent (Abstract Class)</span></span>
<span class="line"><span>└── Robota (Implementation - AI conversation + tool system + plugins)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Plugin System (Extensions):</span></span>
<span class="line"><span>├── BasePlugin (Abstract plugin class)</span></span>
<span class="line"><span>├── Core Plugins (8 essential plugins)</span></span>
<span class="line"><span>└── Custom Plugins (User-defined extensions)</span></span></code></pre></div><h3 id="module-structure" tabindex="-1">Module Structure <a class="header-anchor" href="#module-structure" aria-label="Permalink to &quot;Module Structure&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>packages/agents/src/</span></span>
<span class="line"><span>├── abstracts/           # Abstract base classes</span></span>
<span class="line"><span>├── interfaces/          # Interface definitions</span></span>
<span class="line"><span>├── agents/             # Main agent system</span></span>
<span class="line"><span>│   ├── managers/       # Resource managers</span></span>
<span class="line"><span>│   ├── services/       # Stateless business logic</span></span>
<span class="line"><span>│   └── tools/          # Tool system</span></span>
<span class="line"><span>├── plugins/            # Plugin system</span></span>
<span class="line"><span>└── utils/              # Core utilities</span></span></code></pre></div><h2 id="package-compatibility" tabindex="-1">Package Compatibility <a class="header-anchor" href="#package-compatibility" aria-label="Permalink to &quot;Package Compatibility&quot;">​</a></h2><h3 id="integrated-packages" tabindex="-1">Integrated Packages <a class="header-anchor" href="#integrated-packages" aria-label="Permalink to &quot;Integrated Packages&quot;">​</a></h3><ul><li><strong>@robota-sdk/openai</strong>: Complete agents standard migration</li><li><strong>@robota-sdk/anthropic</strong>: Complete agents standard migration</li><li><strong>@robota-sdk/google</strong>: Complete agents standard migration</li><li><strong>@robota-sdk/team</strong>: Full integration with team collaboration features</li><li><strong>@robota-sdk/sessions</strong>: Complete v2.0.0 redesign with ChatInstance, ConversationServiceImpl, and individual service classes</li></ul><h3 id="deprecated-packages" tabindex="-1">Deprecated Packages <a class="header-anchor" href="#deprecated-packages" aria-label="Permalink to &quot;Deprecated Packages&quot;">​</a></h3><ul><li><strong>@robota-sdk/core</strong>: Deprecated - functionality moved to agents</li><li><strong>@robota-sdk/tools</strong>: Deprecated - functionality moved to agents</li></ul><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Robota } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@robota-sdk/agents&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { OpenAIProvider } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@robota-sdk/openai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Robota</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  provider: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenAIProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    apiKey: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OPENAI_API_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gpt-4o-mini&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add plugins as needed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, how can you help me today?&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response);</span></span></code></pre></div><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><p>See the <a href="./../../examples/">examples directory</a> for comprehensive usage examples including:</p><ul><li>Basic conversations</li><li>Tool calling</li><li>Multi-provider setups</li><li>Team collaboration</li><li>Streaming responses</li><li>Advanced plugin usage</li></ul><h2 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h2><ul><li><a href="./../../api-reference/agents/">API Reference</a></li><li><a href="./../../development/">Development Guide</a></li><li><a href="./../../examples/">Examples</a></li></ul>`,41)]))}const u=a(n,[["render",o]]);export{d as __pageData,u as default};
