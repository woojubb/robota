import{_ as i,c as e,o as a,ag as n}from"./chunks/framework.BDwTZuFy.js";const k=JSON.parse('{"title":"Build and Deployment Process","description":"","frontmatter":{},"headers":[],"relativePath":"development/build-and-deployment.md","filePath":"development/build-and-deployment.md"}'),t={name:"development/build-and-deployment.md"};function l(o,s,p,r,h,d){return a(),e("div",null,s[0]||(s[0]=[n(`<h1 id="build-and-deployment-process" tabindex="-1">Build and Deployment Process <a class="header-anchor" href="#build-and-deployment-process" aria-label="Permalink to &quot;Build and Deployment Process&quot;">​</a></h1><p>This document outlines the build configuration and deployment processes for the Robota project.</p><h2 id="build-system" tabindex="-1">Build System <a class="header-anchor" href="#build-system" aria-label="Permalink to &quot;Build System&quot;">​</a></h2><h3 id="typescript-configuration" tabindex="-1">TypeScript Configuration <a class="header-anchor" href="#typescript-configuration" aria-label="Permalink to &quot;TypeScript Configuration&quot;">​</a></h3><p>The project uses separate TypeScript configurations for production builds and testing:</p><ul><li><code>tsconfig.json</code> - Excludes test files for production builds</li><li><code>tsconfig.test.json</code> - Includes all files for testing</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tsconfig.json - For production build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exclude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src/**/__tests__/**/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src/**/*.test.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src/**/*.test.tsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src/**/*.spec.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src/**/*.spec.tsx&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tsconfig.test.json - For testing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;extends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./tsconfig.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vitest/globals&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;include&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/**/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exclude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="build-tools" tabindex="-1">Build Tools <a class="header-anchor" href="#build-tools" aria-label="Permalink to &quot;Build Tools&quot;">​</a></h3><ul><li><strong>Runtime</strong>: Use bun for TypeScript execution and script running</li><li><strong>Testing</strong>: vitest with TypeScript configuration support</li><li><strong>Type Checking</strong>: Use <code>tsc --noEmit</code> for type validation</li><li><strong>Caching</strong>: Clear build cache when encountering issues</li></ul><h2 id="deployment-process" tabindex="-1">Deployment Process <a class="header-anchor" href="#deployment-process" aria-label="Permalink to &quot;Deployment Process&quot;">​</a></h2><h3 id="package-publishing-workflow" tabindex="-1">Package Publishing Workflow <a class="header-anchor" href="#package-publishing-workflow" aria-label="Permalink to &quot;Package Publishing Workflow&quot;">​</a></h3><p>The deployment process follows these steps:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. Create changeset describing changes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. Use the complete publishing script (includes all necessary steps)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish-packages</span></span></code></pre></div><p>The <code>publish-packages</code> script handles:</p><ul><li>Documentation generation</li><li>README file copying from docs to packages</li><li>Version updates and dependency resolution</li><li>npm publishing with workspace dependency conversion</li><li>Git tag creation and pushing</li><li>Cleanup of temporary files</li></ul><h3 id="version-management" tabindex="-1">Version Management <a class="header-anchor" href="#version-management" aria-label="Permalink to &quot;Version Management&quot;">​</a></h3><ul><li><strong>Semantic Versioning</strong>: Follow semver principles</li><li><strong>Pre-1.0 Releases</strong>: Breaking changes bump minor version</li><li><strong>Changesets</strong>: Create clear, concise changeset descriptions</li><li><strong>Release Notes</strong>: Update CHANGELOG.md for user-facing changes</li></ul><h2 id="message-guidelines" tabindex="-1">Message Guidelines <a class="header-anchor" href="#message-guidelines" aria-label="Permalink to &quot;Message Guidelines&quot;">​</a></h2><h3 id="commit-messages" tabindex="-1">Commit Messages <a class="header-anchor" href="#commit-messages" aria-label="Permalink to &quot;Commit Messages&quot;">​</a></h3><p>Use conventional commit format:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;feat: add new feature&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fix: resolve bug in component&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;docs: update API documentation&quot;</span></span></code></pre></div><h3 id="changeset-descriptions" tabindex="-1">Changeset Descriptions <a class="header-anchor" href="#changeset-descriptions" aria-label="Permalink to &quot;Changeset Descriptions&quot;">​</a></h3><ul><li>Keep under 80 characters</li><li>Use imperative mood (&quot;Add&quot;, &quot;Fix&quot;, &quot;Update&quot;)</li><li>Focus on user impact</li><li>Be specific but concise</li></ul><p>Good examples:</p><ul><li>&quot;Add README files to packages for better npm documentation&quot;</li><li>&quot;Fix circular dependency between core and tools packages&quot;</li><li>&quot;Update TypeScript to v5.3 for better performance&quot;</li></ul><h2 id="development-environment" tabindex="-1">Development Environment <a class="header-anchor" href="#development-environment" aria-label="Permalink to &quot;Development Environment&quot;">​</a></h2><h3 id="dependencies-and-tools" tabindex="-1">Dependencies and Tools <a class="header-anchor" href="#dependencies-and-tools" aria-label="Permalink to &quot;Dependencies and Tools&quot;">​</a></h3><ul><li><strong>Package Manager</strong>: pnpm with workspace configuration</li><li><strong>Runtime</strong>: bun for development and script execution</li><li><strong>Build System</strong>: TypeScript with strict configuration</li><li><strong>Testing</strong>: vitest with comprehensive coverage</li></ul><h3 id="workspace-dependencies" tabindex="-1">Workspace Dependencies <a class="header-anchor" href="#workspace-dependencies" aria-label="Permalink to &quot;Workspace Dependencies&quot;">​</a></h3><p>Internal packages use <code>workspace:*</code> in peerDependencies, which are automatically converted to actual version numbers during publishing.</p>`,30)]))}const u=i(t,[["render",l]]);export{k as __pageData,u as default};
