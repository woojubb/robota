import{_ as s,c as a,o as e,ag as n}from"./chunks/framework.BDwTZuFy.js";const g=JSON.parse('{"title":"Code Quality Standards","description":"","frontmatter":{},"headers":[],"relativePath":"development/code-quality-standards.md","filePath":"development/code-quality-standards.md"}'),t={name:"development/code-quality-standards.md"};function l(r,i,o,d,p,h){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="code-quality-standards" tabindex="-1">Code Quality Standards <a class="header-anchor" href="#code-quality-standards" aria-label="Permalink to &quot;Code Quality Standards&quot;">​</a></h1><p>This document defines code quality standards and linting practices for the Robota project.</p><h2 id="console-output-and-logging-rules" tabindex="-1">Console Output and Logging Rules <a class="header-anchor" href="#console-output-and-logging-rules" aria-label="Permalink to &quot;Console Output and Logging Rules&quot;">​</a></h2><ul><li><strong>Prohibit Direct console.log Usage</strong>: Direct calls to <code>console.log</code> are not allowed in all TypeScript (.ts) files within <code>./packages/</code>.</li><li><strong>Use logger Utility</strong>: When logging is needed, you must use the provided <code>logger</code> utility (<code>info</code>, <code>warn</code>, <code>error</code> methods).</li><li><strong>Exception Paths</strong>: <code>console.log</code> usage is allowed in code within <code>./apps/examples/</code> and <code>./scripts/</code> paths.</li><li><strong>Documentation and Examples</strong>: Code that violates the above rules must be fixed during PR review, and all logs except examples and scripts must be output through the logger.</li><li><strong>logger Examples</strong>:</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { logger } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@robota-sdk/core/src/utils&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Information message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Warning message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Error message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="code-quality-and-linting-rules" tabindex="-1">Code Quality and Linting Rules <a class="header-anchor" href="#code-quality-and-linting-rules" aria-label="Permalink to &quot;Code Quality and Linting Rules&quot;">​</a></h2><h3 id="lint-execution-strategy" tabindex="-1">Lint Execution Strategy <a class="header-anchor" href="#lint-execution-strategy" aria-label="Permalink to &quot;Lint Execution Strategy&quot;">​</a></h3><ul><li><strong>Focus on Development First</strong>: During active development and code writing, focus on implementing functionality and logic rather than fixing lint warnings</li><li><strong>Batch Lint Fixes</strong>: Fix lint issues in batches after completing a logical code section or feature implementation</li><li><strong>Pre-commit Linting</strong>: Always run <code>pnpm run lint:fix</code> before committing code to ensure code quality standards</li><li><strong>End-of-Session Cleanup</strong>: At the end of each development session, run lint:fix to clean up accumulated warnings</li></ul><h3 id="lint-workflow-best-practices" tabindex="-1">Lint Workflow Best Practices <a class="header-anchor" href="#lint-workflow-best-practices" aria-label="Permalink to &quot;Lint Workflow Best Practices&quot;">​</a></h3><ol><li><p><strong>Development Phase</strong>:</p><ul><li>Write code without interrupting flow for minor lint warnings</li><li>Focus on logic, functionality, and architecture</li><li>Ignore non-critical lint warnings during active coding</li></ul></li><li><p><strong>Review Phase</strong>:</p><ul><li>Run <code>pnpm run lint:fix</code> when ready to review your work</li><li>Fix remaining lint issues that couldn&#39;t be auto-fixed</li><li>Address any critical warnings or errors</li></ul></li><li><p><strong>Pre-commit Phase</strong>:</p><ul><li>Always run <code>pnpm run lint:fix</code> before final commit</li><li>Ensure all auto-fixable issues are resolved</li><li>Review and address any remaining warnings</li></ul></li></ol><h3 id="available-lint-commands" tabindex="-1">Available Lint Commands <a class="header-anchor" href="#available-lint-commands" aria-label="Permalink to &quot;Available Lint Commands&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Check lint issues across all packages</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Fix auto-fixable lint issues across all packages</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint:fix</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Fix lint issues in specific package</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @robota-sdk/core</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint:fix</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @robota-sdk/openai</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint:fix</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @robota-sdk/tools</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint:fix</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Fix lint issues in examples</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> robota-examples</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint:fix</span></span></code></pre></div><h3 id="acceptable-lint-warnings-during-development" tabindex="-1">Acceptable Lint Warnings During Development <a class="header-anchor" href="#acceptable-lint-warnings-during-development" aria-label="Permalink to &quot;Acceptable Lint Warnings During Development&quot;">​</a></h3><ul><li><strong>Type-related warnings</strong>: <code>@typescript-eslint/no-explicit-any</code> warnings can be addressed later</li><li><strong>Unused variable warnings</strong>: Variables that will be used later in development</li><li><strong>Import order warnings</strong>: Can be auto-fixed during cleanup phase</li></ul><h3 id="lint-warnings-that-should-be-addressed-immediately" tabindex="-1">Lint Warnings That Should Be Addressed Immediately <a class="header-anchor" href="#lint-warnings-that-should-be-addressed-immediately" aria-label="Permalink to &quot;Lint Warnings That Should Be Addressed Immediately&quot;">​</a></h3><ul><li><strong>Syntax errors</strong>: Fix immediately as they break functionality</li><li><strong>Type errors</strong>: Critical type mismatches that affect functionality</li><li><strong>Security-related warnings</strong>: Address immediately for security reasons</li></ul><h3 id="ide-configuration-recommendations" tabindex="-1">IDE Configuration Recommendations <a class="header-anchor" href="#ide-configuration-recommendations" aria-label="Permalink to &quot;IDE Configuration Recommendations&quot;">​</a></h3><ul><li>Configure your IDE to show lint warnings without disrupting development flow</li><li>Use lint auto-fix on save for critical issues only</li><li>Set up pre-commit hooks to run <code>lint:fix</code> automatically</li></ul><h2 id="legacy-code-management-rules" tabindex="-1">Legacy Code Management Rules <a class="header-anchor" href="#legacy-code-management-rules" aria-label="Permalink to &quot;Legacy Code Management Rules&quot;">​</a></h2><ul><li><strong>No legacy compatibility unless explicitly requested</strong>: Do not maintain legacy code for backward compatibility unless specifically requested by users</li><li><strong>Clean refactoring preferred</strong>: When refactoring code, prefer clean implementation over maintaining old interfaces</li><li><strong>Clear deprecation path</strong>: If legacy code must be maintained, provide clear deprecation warnings and migration paths</li><li><strong>Remove deprecated code</strong>: Regularly remove deprecated code that has been superseded by better implementations</li></ul>`,20)]))}const u=s(t,[["render",l]]);export{g as __pageData,u as default};
