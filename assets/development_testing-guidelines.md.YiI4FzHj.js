import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.BDwTZuFy.js";const c=JSON.parse('{"title":"Testing Guidelines","description":"","frontmatter":{},"headers":[],"relativePath":"development/testing-guidelines.md","filePath":"development/testing-guidelines.md"}'),n={name:"development/testing-guidelines.md"};function l(h,s,p,r,k,o){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="testing-guidelines" tabindex="-1">Testing Guidelines <a class="header-anchor" href="#testing-guidelines" aria-label="Permalink to &quot;Testing Guidelines&quot;">​</a></h1><p>This document provides testing guidelines and best practices for the Robota project.</p><h2 id="testing-philosophy" tabindex="-1">Testing Philosophy <a class="header-anchor" href="#testing-philosophy" aria-label="Permalink to &quot;Testing Philosophy&quot;">​</a></h2><h3 id="real-implementation-first" tabindex="-1">Real Implementation First <a class="header-anchor" href="#real-implementation-first" aria-label="Permalink to &quot;Real Implementation First&quot;">​</a></h3><ul><li>Use real implementations whenever possible throughout the codebase</li><li>Reserve mock objects and test data for automated test environments only</li><li>Example code should demonstrate actual usage patterns that users will experience</li></ul><h3 id="testing-approach" tabindex="-1">Testing Approach <a class="header-anchor" href="#testing-approach" aria-label="Permalink to &quot;Testing Approach&quot;">​</a></h3><ul><li><strong>Unit Tests</strong>: Test individual components in isolation</li><li><strong>Integration Tests</strong>: Test component interactions and workflows</li><li><strong>End-to-end Tests</strong>: Test complete user scenarios</li><li><strong>Error Path Testing</strong>: Verify error conditions and edge cases</li></ul><h2 id="test-organization" tabindex="-1">Test Organization <a class="header-anchor" href="#test-organization" aria-label="Permalink to &quot;Test Organization&quot;">​</a></h2><h3 id="directory-structure" tabindex="-1">Directory Structure <a class="header-anchor" href="#directory-structure" aria-label="Permalink to &quot;Directory Structure&quot;">​</a></h3><p>Tests are organized using <code>__tests__</code> directories within their respective modules:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/</span></span>
<span class="line"><span>├── __tests__/                    # Main module tests</span></span>
<span class="line"><span>│   ├── robota.test.ts</span></span>
<span class="line"><span>│   ├── conversation-history.test.ts</span></span>
<span class="line"><span>│   └── adapter-integration.test.ts</span></span>
<span class="line"><span>├── managers/</span></span>
<span class="line"><span>│   ├── __tests__/                # Manager-specific tests</span></span>
<span class="line"><span>│   │   ├── analytics-manager.test.ts</span></span>
<span class="line"><span>│   │   └── request-limit-manager.test.ts</span></span>
<span class="line"><span>│   ├── analytics-manager.ts</span></span>
<span class="line"><span>│   └── request-limit-manager.ts</span></span>
<span class="line"><span>└── analyzers/</span></span>
<span class="line"><span>    ├── __tests__/                # Analyzer-specific tests</span></span>
<span class="line"><span>    │   └── token-analyzer.test.ts</span></span>
<span class="line"><span>    └── token-analyzer.ts</span></span></code></pre></div><h3 id="file-naming" tabindex="-1">File Naming <a class="header-anchor" href="#file-naming" aria-label="Permalink to &quot;File Naming&quot;">​</a></h3><ul><li>Test files should follow the pattern <code>*.test.ts</code> or <code>*.spec.ts</code></li><li>Test file organization should mirror the source code structure</li><li>Update import paths when moving files to <code>__tests__</code> directories</li></ul><h2 id="mock-usage-guidelines" tabindex="-1">Mock Usage Guidelines <a class="header-anchor" href="#mock-usage-guidelines" aria-label="Permalink to &quot;Mock Usage Guidelines&quot;">​</a></h2><h3 id="when-to-use-mocks" tabindex="-1">When to Use Mocks <a class="header-anchor" href="#when-to-use-mocks" aria-label="Permalink to &quot;When to Use Mocks&quot;">​</a></h3><p>Mocks are appropriate in these scenarios:</p><ul><li>Automated test environments (unit tests, integration tests)</li><li>CI/CD pipeline testing</li><li>Testing external API dependencies (though prefer real test environments when possible)</li></ul><h3 id="when-not-to-use-mocks" tabindex="-1">When NOT to Use Mocks <a class="header-anchor" href="#when-not-to-use-mocks" aria-label="Permalink to &quot;When NOT to Use Mocks&quot;">​</a></h3><ul><li>Production code in <code>/src</code> directories</li><li>Example code in <code>/examples</code> directories</li><li>Documentation examples that users will reference</li></ul><h3 id="mock-implementation-examples" tabindex="-1">Mock Implementation Examples <a class="header-anchor" href="#mock-implementation-examples" aria-label="Permalink to &quot;Mock Implementation Examples&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Good: Real implementation in examples</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// /examples/mcp/mcp-example.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Client } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@modelcontextprotocol/sdk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transport);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Good: Mock for testing only</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// /src/__tests__/mcp-client.test.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MockMCPClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../__mocks__/mcp-client.mock&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">describe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MCP Client&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;should handle responses correctly&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mockClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MockMCPClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mockClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(testContext);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBeDefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="test-coverage-requirements" tabindex="-1">Test Coverage Requirements <a class="header-anchor" href="#test-coverage-requirements" aria-label="Permalink to &quot;Test Coverage Requirements&quot;">​</a></h2><h3 id="coverage-standards" tabindex="-1">Coverage Standards <a class="header-anchor" href="#coverage-standards" aria-label="Permalink to &quot;Coverage Standards&quot;">​</a></h3><ul><li>Unit tests are required for all public APIs</li><li>Integration tests for important user workflows</li><li>Include tests for edge cases and error scenarios</li><li>Maintain reasonable coverage without obsessing over 100%</li></ul><h3 id="test-quality-over-quantity" tabindex="-1">Test Quality Over Quantity <a class="header-anchor" href="#test-quality-over-quantity" aria-label="Permalink to &quot;Test Quality Over Quantity&quot;">​</a></h3><ul><li>Write meaningful tests that catch real issues</li><li>Test behavior, not implementation details</li><li>Include both happy path and error scenarios</li><li>Use descriptive test names that explain the scenario</li></ul><h2 id="testing-refactored-architecture" tabindex="-1">Testing Refactored Architecture <a class="header-anchor" href="#testing-refactored-architecture" aria-label="Permalink to &quot;Testing Refactored Architecture&quot;">​</a></h2><h3 id="manager-based-testing" tabindex="-1">Manager-based Testing <a class="header-anchor" href="#manager-based-testing" aria-label="Permalink to &quot;Manager-based Testing&quot;">​</a></h3><p>Test the new manager-based architecture appropriately:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Test manager functionality</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;should initialize with tool providers&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(robota[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;toolProviderManager&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProviders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHaveLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(robota[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;toolProviderManager&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAvailableTools</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toContain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;getWeather&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Mock providers for testing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MockProvider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mock&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> availableModels</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mock-model&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> chat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ModelResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { content: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Mock response&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="testing-best-practices" tabindex="-1">Testing Best Practices <a class="header-anchor" href="#testing-best-practices" aria-label="Permalink to &quot;Testing Best Practices&quot;">​</a></h2><h3 id="test-environment-setup" tabindex="-1">Test Environment Setup <a class="header-anchor" href="#test-environment-setup" aria-label="Permalink to &quot;Test Environment Setup&quot;">​</a></h3><ul><li>Use minimal logging to reduce test noise</li><li>Capture logs for assertions when testing logging behavior</li><li>Avoid file-based operations in tests when possible</li><li>Clean up resources after test completion</li></ul><h3 id="test-data-management" tabindex="-1">Test Data Management <a class="header-anchor" href="#test-data-management" aria-label="Permalink to &quot;Test Data Management&quot;">​</a></h3><ul><li>Use factory functions for creating test data</li><li>Keep test data simple and focused on the scenario</li><li>Avoid complex test data that obscures the test intent</li><li>Use builders for complex object creation</li></ul><h3 id="async-testing" tabindex="-1">Async Testing <a class="header-anchor" href="#async-testing" aria-label="Permalink to &quot;Async Testing&quot;">​</a></h3><ul><li>Properly handle async operations with async/await</li><li>Test timeout scenarios for long-running operations</li><li>Use appropriate test timeouts for different operation types</li><li>Clean up async resources to prevent test interference</li></ul>`,37)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
