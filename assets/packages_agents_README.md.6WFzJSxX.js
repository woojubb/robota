import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.BDwTZuFy.js";const d=JSON.parse('{"title":"@robota-sdk/agents","description":"","frontmatter":{},"headers":[],"relativePath":"packages/agents/README.md","filePath":"packages/agents/README.md"}'),t={name:"packages/agents/README.md"};function l(r,s,o,p,h,g){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="robota-sdk-agents" tabindex="-1">@robota-sdk/agents <a class="header-anchor" href="#robota-sdk-agents" aria-label="Permalink to &quot;@robota-sdk/agents&quot;">â€‹</a></h1><p>The comprehensive AI agent framework with type-safe architecture and advanced plugin system.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">â€‹</a></h2><p>The <code>@robota-sdk/agents</code> package is the unified core of the Robota SDK, providing a complete AI agent system with advanced capabilities for conversation management, tool execution, and extensible plugin architecture.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">â€‹</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @robota-sdk/agents</span></span></code></pre></div><h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">â€‹</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Robota } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@robota-sdk/agents&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { OpenAIProvider } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@robota-sdk/openai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> openaiProvider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenAIProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ apiKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sk-...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Robota</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyAgent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  aiProviders: [openaiProvider],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  defaultModel: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    provider: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;openai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gpt-4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    systemMessage: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;You are a helpful assistant.&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response);</span></span></code></pre></div><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">â€‹</a></h2><h3 id="ðŸ¤–-agent-system" tabindex="-1">ðŸ¤– Agent System <a class="header-anchor" href="#ðŸ¤–-agent-system" aria-label="Permalink to &quot;ðŸ¤– Agent System&quot;">â€‹</a></h3><ul><li><strong>Type-Safe Architecture</strong>: Full TypeScript support with generic type parameters</li><li><strong>Robota Class</strong>: Complete AI agent implementation with conversation + tool system + plugin integration</li><li><strong>Stateless Service Layer</strong>: ConversationService, ToolExecutionService, ExecutionService for business logic</li><li><strong>Manager Layer</strong>: AIProviders, Tools, AgentFactory, Plugins, ConversationHistory for resource management</li><li><strong>Parallel Tool Execution</strong>: Concurrent multi-tool calling support</li></ul><h3 id="ðŸŒŠ-streaming-response-system" tabindex="-1">ðŸŒŠ Streaming Response System <a class="header-anchor" href="#ðŸŒŠ-streaming-response-system" aria-label="Permalink to &quot;ðŸŒŠ Streaming Response System&quot;">â€‹</a></h3><ul><li><strong>Real-time Streaming</strong>: Full streaming support across all AI providers</li><li><strong>Modular Architecture</strong>: Separate streaming/parsing logic for each provider</li><li><strong>Provider Support</strong>: OpenAI, Anthropic, Google with dedicated stream handlers</li></ul><h3 id="ðŸ”§-tool-system" tabindex="-1">ðŸ”§ Tool System <a class="header-anchor" href="#ðŸ”§-tool-system" aria-label="Permalink to &quot;ðŸ”§ Tool System&quot;">â€‹</a></h3><ul><li><strong>Type-Safe Tools</strong>: <code>BaseTool&lt;TParameters, TResult&gt;</code> with compile-time type checking</li><li><strong>ToolRegistry</strong>: Schema storage and validation system</li><li><strong>Function Tools</strong>: Zod schema-based function tool implementation</li><li><strong>OpenAPI/MCP Support</strong>: Basic structure for extensibility</li></ul><h3 id="ðŸ”Œ-plugin-system" tabindex="-1">ðŸ”Œ Plugin System <a class="header-anchor" href="#ðŸ”Œ-plugin-system" aria-label="Permalink to &quot;ðŸ”Œ Plugin System&quot;">â€‹</a></h3><p>Eight core plugins with type-safe configuration and BasePluginOptions integration:</p><ul><li><strong>ConversationHistoryPlugin</strong>: Comprehensive conversation storage with support for memory, file, and database backends. Features auto-save, batch processing, and configurable limits.</li><li><strong>UsagePlugin</strong>: Advanced usage analytics including token counting, cost calculation, aggregated statistics, and multiple storage strategies (memory/file/remote).</li><li><strong>LoggingPlugin</strong>: Multi-level logging system with console, file, and remote endpoints. Supports custom formatters, batch processing, and structured logging.</li><li><strong>PerformancePlugin</strong>: Real-time performance monitoring including execution time tracking, memory usage, CPU metrics, and customizable performance thresholds.</li><li><strong>ErrorHandlingPlugin</strong>: Robust error management with multiple strategies (simple, exponential-backoff, circuit-breaker, silent) and custom error handlers.</li><li><strong>LimitsPlugin</strong>: Advanced rate limiting with token bucket, sliding window, and fixed window strategies. Supports cost tracking and custom calculators.</li><li><strong>EventEmitterPlugin</strong>: Comprehensive event system with async/sync event handling, filtering, buffering, and lifecycle event tracking.</li><li><strong>WebhookPlugin</strong>: HTTP webhook notifications with batch processing, retry logic, custom transformers, and concurrent request management.</li></ul><h4 id="plugin-features" tabindex="-1">Plugin Features <a class="header-anchor" href="#plugin-features" aria-label="Permalink to &quot;Plugin Features&quot;">â€‹</a></h4><ul><li><strong>Type Safety</strong>: All plugins extend BasePluginOptions for consistent configuration</li><li><strong>Lifecycle Integration</strong>: Automatic integration with agent lifecycle events</li><li><strong>Resource Management</strong>: Built-in cleanup and resource optimization</li><li><strong>Performance Monitoring</strong>: All plugins include built-in statistics and monitoring</li><li><strong>Error Resilience</strong>: Graceful error handling across all plugin operations</li></ul><h4 id="plugin-control-and-configuration" tabindex="-1">Plugin Control and Configuration <a class="header-anchor" href="#plugin-control-and-configuration" aria-label="Permalink to &quot;Plugin Control and Configuration&quot;">â€‹</a></h4><ul><li><strong>Clear Disable Options</strong>: Every plugin provides multiple ways to disable functionality</li><li><strong>No Arbitrary Decisions</strong>: Plugins avoid making policy decisions without explicit configuration</li><li><strong>Explicit Configuration</strong>: All automatic behaviors can be controlled through configuration</li><li><strong>Silent Modes</strong>: Most plugins support &#39;silent&#39; strategies for performance-critical scenarios</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Complete plugin disable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Robota</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No plugins</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Selective plugin disable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Robota</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggingPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ strategy: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;silent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, enabled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LimitsPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ strategy: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UsagePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ strategy: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;silent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="plugin-documentation" tabindex="-1">Plugin Documentation <a class="header-anchor" href="#plugin-documentation" aria-label="Permalink to &quot;Plugin Documentation&quot;">â€‹</a></h4><ul><li><strong><a href="./plugin-automatic-behaviors.html">Plugin Behaviors</a></strong>: Detailed documentation of all automatic behaviors and default policies</li><li><strong><a href="./plugin-configuration-examples.html">Configuration Examples</a></strong>: Comprehensive examples for each plugin including disable options</li><li><strong><a href="./plugin-best-practices.html">Best Practices</a></strong>: Guidelines for plugin configuration and performance optimization</li></ul><h3 id="ðŸ”’-type-safety-features" tabindex="-1">ðŸ”’ Type Safety Features <a class="header-anchor" href="#ðŸ”’-type-safety-features" aria-label="Permalink to &quot;ðŸ”’ Type Safety Features&quot;">â€‹</a></h3><ul><li><strong>Generic Type Parameters</strong>: <code>BaseAgent&lt;TConfig, TContext, TMessage&gt;</code></li><li><strong>Provider Agnostic</strong>: Dynamic provider registration with type safety</li><li><strong>Extended RunContext</strong>: Provider-specific options with type preservation</li><li><strong>Plugin Type Parameters</strong>: <code>BasePlugin&lt;TOptions, TStats&gt;</code> for specialized configurations</li></ul><h2 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">â€‹</a></h2><h3 id="core-abstraction-layers" tabindex="-1">Core Abstraction Layers <a class="header-anchor" href="#core-abstraction-layers" aria-label="Permalink to &quot;Core Abstraction Layers&quot;">â€‹</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BaseAgent&lt;TConfig, TContext, TMessage&gt; (Abstract Class)</span></span>
<span class="line"><span>â””â”€â”€ Robota (Implementation - AI conversation + tool system + plugins)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>BaseAIProvider&lt;TConfig, TMessage, TResponse&gt;</span></span>
<span class="line"><span>â”œâ”€â”€ OpenAIProvider (via @robota-sdk/openai)</span></span>
<span class="line"><span>â”œâ”€â”€ AnthropicProvider (via @robota-sdk/anthropic)</span></span>
<span class="line"><span>â””â”€â”€ GoogleProvider (via @robota-sdk/google)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>BaseTool&lt;TParameters, TResult&gt;</span></span>
<span class="line"><span>â”œâ”€â”€ FunctionTool (Zod schema-based)</span></span>
<span class="line"><span>â”œâ”€â”€ OpenAPITool (API specification-based)</span></span>
<span class="line"><span>â””â”€â”€ MCPTool (Model Context Protocol)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>BasePlugin&lt;TOptions, TStats&gt;</span></span>
<span class="line"><span>â”œâ”€â”€ Core Plugins (8 essential plugins)</span></span>
<span class="line"><span>â””â”€â”€ Custom Plugins (User-defined extensions)</span></span></code></pre></div><h3 id="module-structure" tabindex="-1">Module Structure <a class="header-anchor" href="#module-structure" aria-label="Permalink to &quot;Module Structure&quot;">â€‹</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>packages/agents/src/</span></span>
<span class="line"><span>â”œâ”€â”€ abstracts/           # Abstract base classes with type parameters</span></span>
<span class="line"><span>â”œâ”€â”€ interfaces/          # Type-safe interface definitions</span></span>
<span class="line"><span>â”œâ”€â”€ agents/             # Main agent system</span></span>
<span class="line"><span>â”‚   â”œâ”€â”€ managers/       # Resource managers</span></span>
<span class="line"><span>â”‚   â”œâ”€â”€ services/       # Stateless business logic</span></span>
<span class="line"><span>â”‚   â””â”€â”€ tools/          # Tool system</span></span>
<span class="line"><span>â”œâ”€â”€ plugins/            # Plugin system with Facade pattern</span></span>
<span class="line"><span>â””â”€â”€ utils/              # Core utilities</span></span></code></pre></div><h2 id="development" tabindex="-1">Development <a class="header-anchor" href="#development" aria-label="Permalink to &quot;Development&quot;">â€‹</a></h2><p>See <a href="./development.html">development.md</a> for detailed development guidelines.</p><h2 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">â€‹</a></h2><p>See <a href="./api.html">api.md</a> for complete API documentation.</p><h2 id="architecture-guide" tabindex="-1">Architecture Guide <a class="header-anchor" href="#architecture-guide" aria-label="Permalink to &quot;Architecture Guide&quot;">â€‹</a></h2><p>See <a href="./architecture.html">architecture.md</a> for detailed architecture information.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">â€‹</a></h2><ul><li><a href="./../../../docs/examples/basic-usage.html">Basic Usage</a></li><li><a href="./../../../docs/examples/tool-integration.html">Tool Integration</a></li><li><a href="./../../../docs/examples/plugin-development.html">Plugin Development</a></li><li><a href="./../../../docs/examples/streaming.html">Streaming Responses</a></li></ul><h2 id="package-compatibility" tabindex="-1">Package Compatibility <a class="header-anchor" href="#package-compatibility" aria-label="Permalink to &quot;Package Compatibility&quot;">â€‹</a></h2><h3 id="integrated-packages" tabindex="-1">Integrated Packages <a class="header-anchor" href="#integrated-packages" aria-label="Permalink to &quot;Integrated Packages&quot;">â€‹</a></h3><ul><li><strong>@robota-sdk/openai</strong>: Complete agents standard migration</li><li><strong>@robota-sdk/anthropic</strong>: Complete agents standard migration</li><li><strong>@robota-sdk/google</strong>: Complete agents standard migration</li><li><strong>@robota-sdk/team</strong>: Full integration with team collaboration features</li></ul><h3 id="deprecated-packages" tabindex="-1">Deprecated Packages <a class="header-anchor" href="#deprecated-packages" aria-label="Permalink to &quot;Deprecated Packages&quot;">â€‹</a></h3><ul><li><strong>@robota-sdk/core</strong>: Deprecated - functionality moved to agents</li><li><strong>@robota-sdk/tools</strong>: Deprecated - functionality moved to agents</li></ul><h2 id="license" tabindex="-1">License <a class="header-anchor" href="#license" aria-label="Permalink to &quot;License&quot;">â€‹</a></h2><p>MIT</p>`,47)]))}const k=a(t,[["render",l]]);export{d as __pageData,k as default};
