import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.BDwTZuFy.js";const c=JSON.parse('{"title":"Testing Guidelines","description":"","frontmatter":{},"headers":[],"relativePath":"development/testing-guidelines.md","filePath":"development/testing-guidelines.md"}'),n={name:"development/testing-guidelines.md"};function l(p,s,h,r,k,o){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="testing-guidelines" tabindex="-1">Testing Guidelines <a class="header-anchor" href="#testing-guidelines" aria-label="Permalink to &quot;Testing Guidelines&quot;">​</a></h1><p>This document provides comprehensive testing guidelines for the Robota project.</p><h2 id="mock-and-test-data-usage-rules" tabindex="-1">Mock and Test Data Usage Rules <a class="header-anchor" href="#mock-and-test-data-usage-rules" aria-label="Permalink to &quot;Mock and Test Data Usage Rules&quot;">​</a></h2><h3 id="basic-principles" tabindex="-1">Basic Principles <a class="header-anchor" href="#basic-principles" aria-label="Permalink to &quot;Basic Principles&quot;">​</a></h3><ul><li><strong>Prioritize Real Implementation</strong>: Prefer real implementation over Mock or dummy data throughout the codebase</li><li><strong>Use Mock Only in Test Code</strong>: Mock objects and dummy data should only be used in automated test code</li><li><strong>Example Code Uses Real Implementation</strong>: Example code should use real implementation in the same way actual users would</li></ul><h3 id="mock-implementation-restrictions" tabindex="-1">Mock Implementation Restrictions <a class="header-anchor" href="#mock-implementation-restrictions" aria-label="Permalink to &quot;Mock Implementation Restrictions&quot;">​</a></h3><ul><li><code>/tests</code> directory: Place Mock implementations for testing - used only during test execution</li><li>Do not include Mock implementations or dummy data in <code>/src</code> and <code>/examples</code> directories</li><li>Example code uses simplified real implementation to provide an environment similar to actual situations</li></ul><h3 id="when-mock-usage-is-allowed" tabindex="-1">When Mock Usage is Allowed <a class="header-anchor" href="#when-mock-usage-is-allowed" aria-label="Permalink to &quot;When Mock Usage is Allowed&quot;">​</a></h3><ul><li>When running automated tests (unit tests, integration tests)</li><li>When conducting tests that depend on external APIs (preferably use real test API keys even in this case)</li><li>When running tests in CI/CD pipelines</li></ul><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Good example: Using real implementation</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// /examples/mcp/mcp-example.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Client } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@modelcontextprotocol/sdk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transport);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ❌ Bad example: Using Mock in examples</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// /examples/mcp/mcp-example.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MockMCPClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./__mocks__/mcp-client.mock&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mockClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MockMCPClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mockClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context);</span></span></code></pre></div><h2 id="test-file-organization" tabindex="-1">Test File Organization <a class="header-anchor" href="#test-file-organization" aria-label="Permalink to &quot;Test File Organization&quot;">​</a></h2><h3 id="directory-structure" tabindex="-1">Directory Structure <a class="header-anchor" href="#directory-structure" aria-label="Permalink to &quot;Directory Structure&quot;">​</a></h3><ul><li><strong>Use <code>__tests__</code> directories</strong>: All test files should be placed in <code>__tests__</code> directories within their respective modules</li><li><strong>Mirror source structure</strong>: Test file organization should mirror the source code structure</li><li><strong>Naming convention</strong>: Test files should follow the pattern <code>*.test.ts</code> or <code>*.spec.ts</code></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/</span></span>
<span class="line"><span>├── __tests__/                    # Main module tests</span></span>
<span class="line"><span>│   ├── robota.test.ts</span></span>
<span class="line"><span>│   ├── conversation-history.test.ts</span></span>
<span class="line"><span>│   └── adapter-integration.test.ts</span></span>
<span class="line"><span>├── managers/</span></span>
<span class="line"><span>│   ├── __tests__/                # Manager-specific tests</span></span>
<span class="line"><span>│   │   ├── analytics-manager.test.ts</span></span>
<span class="line"><span>│   │   └── request-limit-manager.test.ts</span></span>
<span class="line"><span>│   ├── analytics-manager.ts</span></span>
<span class="line"><span>│   └── request-limit-manager.ts</span></span>
<span class="line"><span>└── analyzers/</span></span>
<span class="line"><span>    ├── __tests__/                # Analyzer-specific tests</span></span>
<span class="line"><span>    │   └── token-analyzer.test.ts</span></span>
<span class="line"><span>    └── token-analyzer.ts</span></span></code></pre></div><ul><li><strong>Import path adjustments</strong>: When moving test files to <code>__tests__</code> directories, update import paths to use relative paths (<code>../</code> for parent directory)</li><li><strong>Test discovery</strong>: Test runners (vitest) automatically discover test files in <code>__tests__</code> directories</li></ul><h2 id="test-coverage-requirements" tabindex="-1">Test Coverage Requirements <a class="header-anchor" href="#test-coverage-requirements" aria-label="Permalink to &quot;Test Coverage Requirements&quot;">​</a></h2><h3 id="coverage-standards" tabindex="-1">Coverage Standards <a class="header-anchor" href="#coverage-standards" aria-label="Permalink to &quot;Coverage Standards&quot;">​</a></h3><ul><li>Unit tests are required for all public APIs</li><li>Integration tests are recommended for important features</li><li>Include tests for edge cases and error handling</li></ul><h3 id="test-structure" tabindex="-1">Test Structure <a class="header-anchor" href="#test-structure" aria-label="Permalink to &quot;Test Structure&quot;">​</a></h3><ul><li>Write tests for each file</li><li>Group related tests logically</li><li>Tests should be able to run independently</li></ul><h2 id="testing-refactored-structure" tabindex="-1">Testing Refactored Structure <a class="header-anchor" href="#testing-refactored-structure" aria-label="Permalink to &quot;Testing Refactored Structure&quot;">​</a></h2><h3 id="manager-based-testing" tabindex="-1">Manager-based Testing <a class="header-anchor" href="#manager-based-testing" aria-label="Permalink to &quot;Manager-based Testing&quot;">​</a></h3><ul><li><strong>Manager-based Testing</strong>: Write tests according to the refactored manager structure</li><li><strong>Mock Provider Implementation</strong>: Write Mock Providers that match the new interfaces</li><li><strong>Internal Property Access</strong>: Verify internal state through managers</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Manager-based test example</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;should initialize with function call configuration&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customRobota[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;functionCallManager&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDefaultMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;auto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customRobota[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;functionCallManager&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMaxCalls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Mock Provider matching new structure</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MockProvider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mock&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> availableModels</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mock-model&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> chat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ModelResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Mock implementation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,25)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
