import{_ as a,c as i,o as s,ag as n}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"Development Guidelines","description":"","frontmatter":{},"headers":[],"relativePath":"development/development-guidelines.md","filePath":"development/development-guidelines.md"}'),t={name:"development/development-guidelines.md"};function l(o,e,r,d,p,c){return s(),i("div",null,e[0]||(e[0]=[n(`<h1 id="development-guidelines" tabindex="-1">Development Guidelines <a class="header-anchor" href="#development-guidelines" aria-label="Permalink to &quot;Development Guidelines&quot;">â€‹</a></h1><p>This document provides essential development guidelines for the Robota project architecture and coding standards.</p><blockquote><p><strong>ðŸ“– Additional References</strong>:</p><ul><li><a href="./testing-guidelines.html">Testing Guidelines</a> - Mock usage, test organization, and coverage requirements</li><li><a href="./build-and-deployment.html">Build and Deployment</a> - Build configuration and deployment processes</li><li><a href="./code-quality-standards.html">Code Quality Standards</a> - Linting rules and console output guidelines</li><li><a href="./code-improvements.html">Code Improvements</a> - Detailed implementation patterns and refactoring strategies</li></ul></blockquote><h2 id="core-principles" tabindex="-1">Core Principles <a class="header-anchor" href="#core-principles" aria-label="Permalink to &quot;Core Principles&quot;">â€‹</a></h2><h3 id="module-separation" tabindex="-1">Module Separation <a class="header-anchor" href="#module-separation" aria-label="Permalink to &quot;Module Separation&quot;">â€‹</a></h3><ul><li>Each feature should be implemented as clearly separated modules</li><li>Dependencies between modules should be minimized and explicitly managed</li><li>Core modules should not depend on specific implementations</li></ul><h3 id="interface-design" tabindex="-1">Interface Design <a class="header-anchor" href="#interface-design" aria-label="Permalink to &quot;Interface Design&quot;">â€‹</a></h3><ul><li>Clear interface definitions</li><li>Design considering extensibility</li><li>Consistent naming conventions</li></ul><h2 id="architecture-patterns" tabindex="-1">Architecture Patterns <a class="header-anchor" href="#architecture-patterns" aria-label="Permalink to &quot;Architecture Patterns&quot;">â€‹</a></h2><h3 id="manager-pattern" tabindex="-1">Manager Pattern <a class="header-anchor" href="#manager-pattern" aria-label="Permalink to &quot;Manager Pattern&quot;">â€‹</a></h3><ul><li>Organize manager classes by functionality to adhere to the Single Responsibility Principle</li><li>Each manager handles the state and behavior of a specific domain</li><li>Examples: <code>AIProviderManager</code>, <code>ToolProviderManager</code>, <code>SystemMessageManager</code></li></ul><h3 id="service-layer" tabindex="-1">Service Layer <a class="header-anchor" href="#service-layer" aria-label="Permalink to &quot;Service Layer&quot;">â€‹</a></h3><ul><li>Business logic is separated into service classes</li><li>Complex business processes are handled by combining managers</li><li>Example: <code>ConversationService</code></li></ul><h3 id="dependency-injection-and-delegation" tabindex="-1">Dependency Injection and Delegation <a class="header-anchor" href="#dependency-injection-and-delegation" aria-label="Permalink to &quot;Dependency Injection and Delegation&quot;">â€‹</a></h3><ul><li>The main class is configured with managers through dependency injection</li><li>Public APIs are implemented by delegating to appropriate managers</li></ul><h2 id="documentation-standards" tabindex="-1">Documentation Standards <a class="header-anchor" href="#documentation-standards" aria-label="Permalink to &quot;Documentation Standards&quot;">â€‹</a></h2><h3 id="code-documentation" tabindex="-1">Code Documentation <a class="header-anchor" href="#code-documentation" aria-label="Permalink to &quot;Code Documentation&quot;">â€‹</a></h3><ul><li>Include JSDoc comments for all public APIs</li><li>Add inline comments for complex algorithms or business logic</li><li>Provide example code</li><li><strong>All code comments must be written in English</strong>: JSDoc comments, inline comments, etc.</li><li><strong>All log messages and error messages must be written in English</strong>: Logger messages, error messages, console output, etc.</li></ul><h3 id="jsdoc-comment-format" tabindex="-1">JSDoc Comment Format <a class="header-anchor" href="#jsdoc-comment-format" aria-label="Permalink to &quot;JSDoc Comment Format&quot;">â€‹</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Main Robota class</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Provides an interface for initializing and running agents</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@example</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * \`\`\`ts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * const robota = new Robota({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   aiProviders: { openai: openaiProvider },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   currentProvider: &#39;openai&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   currentModel: &#39;gpt-4&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   systemPrompt: &#39;You are a helpful AI assistant.&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * const response = await robota.run(&#39;Hello!&#39;);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * \`\`\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Robota</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * Create a Robota instance</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - Robota initialization options</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RobotaOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Implementation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="example-code-creation-rules" tabindex="-1">Example Code Creation Rules <a class="header-anchor" href="#example-code-creation-rules" aria-label="Permalink to &quot;Example Code Creation Rules&quot;">â€‹</a></h3><ul><li><strong>Never create examples automatically</strong>: Do not automatically create example code after completing development work</li><li><strong>Create examples only when explicitly requested by users</strong>: Example code should only be created when users specifically ask for examples, demonstrations, or usage patterns</li><li><strong>Real implementation preferred</strong>: When examples are created (upon user request), use real implementations rather than mock or dummy data</li><li><strong>Complete and executable</strong>: Examples should be complete and immediately executable when created</li></ul><h2 id="quality-standards" tabindex="-1">Quality Standards <a class="header-anchor" href="#quality-standards" aria-label="Permalink to &quot;Quality Standards&quot;">â€‹</a></h2><h3 id="performance-considerations" tabindex="-1">Performance Considerations <a class="header-anchor" href="#performance-considerations" aria-label="Permalink to &quot;Performance Considerations&quot;">â€‹</a></h3><ul><li>Identify and optimize performance-sensitive code paths</li><li>Minimize unnecessary API calls</li><li>Monitor and optimize memory usage</li></ul><h3 id="security-considerations" tabindex="-1">Security Considerations <a class="header-anchor" href="#security-considerations" aria-label="Permalink to &quot;Security Considerations&quot;">â€‹</a></h3><ul><li>Validate user input</li><li>Protect sensitive information like API keys</li><li>Regularly update dependencies</li></ul><h3 id="accessibility-considerations" tabindex="-1">Accessibility Considerations <a class="header-anchor" href="#accessibility-considerations" aria-label="Permalink to &quot;Accessibility Considerations&quot;">â€‹</a></h3><ul><li>Clear error messages</li><li>Logging and debugging support</li><li>Support for various user scenarios</li></ul><h2 id="external-documentation" tabindex="-1">External Documentation <a class="header-anchor" href="#external-documentation" aria-label="Permalink to &quot;External Documentation&quot;">â€‹</a></h2><ul><li>Update relevant documentation for new features</li><li>Reflect API changes in documentation</li><li>Update CHANGELOG.md for important changes</li></ul>`,31)]))}const m=a(t,[["render",l]]);export{u as __pageData,m as default};
