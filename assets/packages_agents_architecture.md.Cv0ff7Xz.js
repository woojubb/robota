import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.BDwTZuFy.js";const d=JSON.parse('{"title":"@robota-sdk/agents Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"packages/agents/architecture.md","filePath":"packages/agents/architecture.md"}'),t={name:"packages/agents/architecture.md"};function l(r,s,o,h,p,g){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="robota-sdk-agents-architecture" tabindex="-1">@robota-sdk/agents Architecture <a class="header-anchor" href="#robota-sdk-agents-architecture" aria-label="Permalink to &quot;@robota-sdk/agents Architecture&quot;">​</a></h1><h2 id="🏗️-architecture-overview" tabindex="-1">🏗️ Architecture Overview <a class="header-anchor" href="#🏗️-architecture-overview" aria-label="Permalink to &quot;🏗️ Architecture Overview&quot;">​</a></h2><p>The <code>@robota-sdk/agents</code> package is built with a comprehensive multi-layered architecture designed for modularity, type safety, extensibility, and cross-platform compatibility.</p><h2 id="🌐-cross-platform-design-principles" tabindex="-1">🌐 Cross-Platform Design Principles <a class="header-anchor" href="#🌐-cross-platform-design-principles" aria-label="Permalink to &quot;🌐 Cross-Platform Design Principles&quot;">​</a></h2><h3 id="universal-compatibility" tabindex="-1">Universal Compatibility <a class="header-anchor" href="#universal-compatibility" aria-label="Permalink to &quot;Universal Compatibility&quot;">​</a></h3><ul><li><strong>Runtime Agnostic</strong>: Works identically in Node.js, browsers, and WebWorkers</li><li><strong>Pure JavaScript Core</strong>: No environment-specific dependencies in core logic</li><li><strong>Zero Breaking Changes</strong>: Existing Node.js applications work unchanged</li><li><strong>Progressive Enhancement</strong>: Environment-specific features are optional optimizations</li></ul><h3 id="browser-compatibility-implementation" tabindex="-1">Browser Compatibility Implementation <a class="header-anchor" href="#browser-compatibility-implementation" aria-label="Permalink to &quot;Browser Compatibility Implementation&quot;">​</a></h3><ul><li><strong>Timer System</strong>: Uses universal <code>TimerId</code> type (<code>ReturnType&lt;typeof setTimeout&gt;</code>)</li><li><strong>Cryptography</strong>: Pure JavaScript implementations (jsSHA for HMAC signatures)</li><li><strong>Storage Abstraction</strong>: Memory/IndexedDB for browsers, filesystem for Node.js</li><li><strong>Configuration Injection</strong>: No <code>process.env</code> dependencies in core library code</li></ul><h2 id="📦-core-architecture-layers" tabindex="-1">📦 Core Architecture Layers <a class="header-anchor" href="#📦-core-architecture-layers" aria-label="Permalink to &quot;📦 Core Architecture Layers&quot;">​</a></h2><h3 id="_1-abstract-base-classes" tabindex="-1">1. Abstract Base Classes <a class="header-anchor" href="#_1-abstract-base-classes" aria-label="Permalink to &quot;1. Abstract Base Classes&quot;">​</a></h3><p>All core components extend from type-safe abstract base classes:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BaseAgent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TConfig, TContext, TMessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Robota</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Main Implementation)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BaseAIProvider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TConfig, TMessage, TResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpenAIProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (via @robota</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sdk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">openai)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnthropicProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (via @robota</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sdk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">anthropic)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└── </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GoogleProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (via @robota</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sdk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">google)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BaseTool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TParameters, TResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Zod schema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">based)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpenAPITool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">API</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> specification</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">based)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└── </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MCPTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Model Context Protocol)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BasePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TStats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; (Enhanced with Classification System)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── ConversationHistoryPlugin [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">STORAGE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIGH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── ExecutionAnalyticsPlugin [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MONITORING</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NORMAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── UsagePlugin [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MONITORING</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NORMAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── LoggingPlugin [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LOGGING</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIGH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── PerformancePlugin [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MONITORING</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NORMAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── ErrorHandlingPlugin [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ERROR_HANDLING</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIGH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── LimitsPlugin [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LIMITS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NORMAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── EventEmitterPlugin [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EVENT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CRITICAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└── WebhookPlugin [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NOTIFICATION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TStats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; (New Modular Architecture)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── Storage </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Future)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RAG</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Future)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└── File Processing </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Future)</span></span></code></pre></div><h3 id="_2-service-layer-stateless-business-logic" tabindex="-1">2. Service Layer (Stateless Business Logic) <a class="header-anchor" href="#_2-service-layer-stateless-business-logic" aria-label="Permalink to &quot;2. Service Layer (Stateless Business Logic)&quot;">​</a></h3><ul><li><strong>ConversationService</strong>: Message handling and conversation flow</li><li><strong>ToolExecutionService</strong>: Tool discovery, validation, and execution</li><li><strong>ExecutionService</strong>: Agent execution orchestration with streaming support</li></ul><h3 id="_3-manager-layer-resource-management" tabindex="-1">3. Manager Layer (Resource Management) <a class="header-anchor" href="#_3-manager-layer-resource-management" aria-label="Permalink to &quot;3. Manager Layer (Resource Management)&quot;">​</a></h3><ul><li><strong>AIProviderManager</strong>: Dynamic provider registration and management</li><li><strong>ToolManager</strong>: Tool registry and schema management</li><li><strong>ConversationHistoryManager</strong>: Conversation storage across different backends</li><li><strong>PluginManager</strong>: Plugin lifecycle and coordination</li><li><strong>ModuleRegistry</strong>: Module registration, dependency resolution, and lifecycle management</li><li><strong>ModuleTypeRegistry</strong>: Dynamic module type system with validation and compatibility checking</li></ul><h3 id="_4-enhanced-plugin-system-architecture" tabindex="-1">4. Enhanced Plugin System Architecture <a class="header-anchor" href="#_4-enhanced-plugin-system-architecture" aria-label="Permalink to &quot;4. Enhanced Plugin System Architecture&quot;">​</a></h3><h4 id="plugin-classification-system" tabindex="-1">Plugin Classification System <a class="header-anchor" href="#plugin-classification-system" aria-label="Permalink to &quot;Plugin Classification System&quot;">​</a></h4><ul><li><strong>Categories</strong>: LOGGING, MONITORING, STORAGE, NOTIFICATION, LIMITS, ERROR_HANDLING, EVENT</li><li><strong>Priority Levels</strong>: CRITICAL, HIGH, NORMAL, LOW (execution ordering)</li><li><strong>Module Event Subscription</strong>: Plugins can subscribe to module lifecycle events</li><li><strong>Backward Compatibility</strong>: All existing plugins work without modification</li></ul><h4 id="core-plugins-enhanced-with-classification" tabindex="-1">Core Plugins (Enhanced with Classification) <a class="header-anchor" href="#core-plugins-enhanced-with-classification" aria-label="Permalink to &quot;Core Plugins (Enhanced with Classification)&quot;">​</a></h4><h4 id="conversationhistoryplugin" tabindex="-1">ConversationHistoryPlugin <a class="header-anchor" href="#conversationhistoryplugin" aria-label="Permalink to &quot;ConversationHistoryPlugin&quot;">​</a></h4><ul><li><strong>Storage Options</strong>: Memory, File, Database</li><li><strong>UniversalMessage Standard</strong>: Consistent message format across providers</li><li><strong>History Management</strong>: Load, save, clear conversation history</li></ul><h4 id="usageplugin" tabindex="-1">UsagePlugin <a class="header-anchor" href="#usageplugin" aria-label="Permalink to &quot;UsagePlugin&quot;">​</a></h4><ul><li><strong>Metrics Collection</strong>: API calls, tokens, costs</li><li><strong>Storage Backends</strong>: Memory, File, Database</li><li><strong>Analytics</strong>: Usage patterns and optimization insights</li></ul><h4 id="loggingplugin" tabindex="-1">LoggingPlugin <a class="header-anchor" href="#loggingplugin" aria-label="Permalink to &quot;LoggingPlugin&quot;">​</a></h4><ul><li><strong>Multi-Storage</strong>: Console, File, Remote endpoints</li><li><strong>Environment Control</strong>: Log level and destination management</li><li><strong>Format Support</strong>: JSON, text, custom formatters</li></ul><h4 id="performanceplugin" tabindex="-1">PerformancePlugin <a class="header-anchor" href="#performanceplugin" aria-label="Permalink to &quot;PerformancePlugin&quot;">​</a></h4><ul><li><strong>System Metrics</strong>: Response time, memory usage, CPU utilization</li><li><strong>Storage Options</strong>: Memory-based performance tracking</li><li><strong>Optimization</strong>: Performance bottleneck identification</li></ul><h4 id="errorhandlingplugin" tabindex="-1">ErrorHandlingPlugin <a class="header-anchor" href="#errorhandlingplugin" aria-label="Permalink to &quot;ErrorHandlingPlugin&quot;">​</a></h4><ul><li><strong>Error Logging</strong>: Comprehensive error tracking and reporting</li><li><strong>Recovery Strategies</strong>: Automatic retry and fallback mechanisms</li><li><strong>Context Preservation</strong>: Error context for debugging</li></ul><h4 id="limitsplugin" tabindex="-1">LimitsPlugin <a class="header-anchor" href="#limitsplugin" aria-label="Permalink to &quot;LimitsPlugin&quot;">​</a></h4><ul><li><strong>Rate Limiting</strong>: Request rate and token usage limits</li><li><strong>Cost Control</strong>: Budget and spending limits</li><li><strong>Quota Management</strong>: Usage quotas and alerts</li></ul><h4 id="eventemitterplugin" tabindex="-1">EventEmitterPlugin <a class="header-anchor" href="#eventemitterplugin" aria-label="Permalink to &quot;EventEmitterPlugin&quot;">​</a></h4><ul><li><strong>Tool Events</strong>: Tool execution and completion events</li><li><strong>Event Propagation</strong>: Cross-system event broadcasting</li><li><strong>Custom Events</strong>: User-defined event handling</li></ul><h4 id="webhookplugin" tabindex="-1">WebhookPlugin <a class="header-anchor" href="#webhookplugin" aria-label="Permalink to &quot;WebhookPlugin&quot;">​</a></h4><ul><li><strong>External Notifications</strong>: HTTP webhook integrations</li><li><strong>Event Filtering</strong>: Selective webhook triggering</li><li><strong>Retry Logic</strong>: Robust webhook delivery</li></ul><h3 id="_5-module-system-architecture" tabindex="-1">5. Module System Architecture <a class="header-anchor" href="#_5-module-system-architecture" aria-label="Permalink to &quot;5. Module System Architecture&quot;">​</a></h3><h4 id="module-infrastructure" tabindex="-1">Module Infrastructure <a class="header-anchor" href="#module-infrastructure" aria-label="Permalink to &quot;Module Infrastructure&quot;">​</a></h4><ul><li><strong>BaseModule</strong>: Abstract foundation for all module implementations</li><li><strong>ModuleRegistry</strong>: Centralized module registration and lifecycle management</li><li><strong>ModuleTypeRegistry</strong>: Dynamic type system with validation and compatibility checking</li><li><strong>Event-Driven Communication</strong>: Loose coupling between modules and plugins</li></ul><h4 id="module-lifecycle-management" tabindex="-1">Module Lifecycle Management <a class="header-anchor" href="#module-lifecycle-management" aria-label="Permalink to &quot;Module Lifecycle Management&quot;">​</a></h4><ol><li><strong>Registration</strong>: Modules register with ModuleRegistry</li><li><strong>Dependency Resolution</strong>: Automatic dependency ordering and circular dependency detection</li><li><strong>Initialization</strong>: Modules initialize in dependency order</li><li><strong>Execution</strong>: Modules execute with context and emit events</li><li><strong>Disposal</strong>: Proper cleanup and resource management</li></ol><h4 id="module-event-system" tabindex="-1">Module Event System <a class="header-anchor" href="#module-event-system" aria-label="Permalink to &quot;Module Event System&quot;">​</a></h4><ul><li><strong>Event Broadcasting</strong>: Module activities automatically broadcast to EventEmitter</li><li><strong>Plugin Subscription</strong>: Plugins can subscribe to specific module events</li><li><strong>Event Types</strong>: <code>module.initialize.start</code>, <code>module.initialize.complete</code>, <code>module.execution.start</code>, <code>module.execution.complete</code>, <code>module.execution.error</code>, <code>module.dispose.complete</code></li><li><strong>Event Data</strong>: Standardized event data structure with module name, type, execution ID, and metrics</li></ul><h4 id="module-types-and-capabilities" tabindex="-1">Module Types and Capabilities <a class="header-anchor" href="#module-types-and-capabilities" aria-label="Permalink to &quot;Module Types and Capabilities&quot;">​</a></h4><ul><li><strong>Built-in Types</strong>: storage, processing, integration, capability</li><li><strong>Layer-Based Architecture</strong>: Modules organized by functional layers</li><li><strong>Capability Declaration</strong>: Modules declare their capabilities for discovery</li><li><strong>Compatibility Checking</strong>: Type system ensures module compatibility</li></ul><h4 id="module-plugin-integration" tabindex="-1">Module-Plugin Integration <a class="header-anchor" href="#module-plugin-integration" aria-label="Permalink to &quot;Module-Plugin Integration&quot;">​</a></h4><ul><li><strong>Event-Driven</strong>: Modules emit events, plugins subscribe to events</li><li><strong>Loose Coupling</strong>: Modules and plugins don&#39;t directly depend on each other</li><li><strong>Monitoring</strong>: LoggingPlugin, PerformancePlugin, UsagePlugin monitor module activities</li><li><strong>Analytics</strong>: ExecutionAnalyticsPlugin tracks module performance and statistics</li></ul><h2 id="🔧-tool-system-architecture" tabindex="-1">🔧 Tool System Architecture <a class="header-anchor" href="#🔧-tool-system-architecture" aria-label="Permalink to &quot;🔧 Tool System Architecture&quot;">​</a></h2><h3 id="tool-registry-system" tabindex="-1">Tool Registry System <a class="header-anchor" href="#tool-registry-system" aria-label="Permalink to &quot;Tool Registry System&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ToolRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  registerTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BaseTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BaseTool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getSchema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ToolSchema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  validateParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="function-tool-implementation" tabindex="-1">Function Tool Implementation <a class="header-anchor" href="#function-tool-implementation" aria-label="Permalink to &quot;Function Tool Implementation&quot;">​</a></h3><ul><li><strong>Zod Integration</strong>: Schema-first tool definition</li><li><strong>Type Safety</strong>: Compile-time parameter validation</li><li><strong>Runtime Validation</strong>: Parameter checking at execution time</li></ul><h3 id="tool-execution-flow" tabindex="-1">Tool Execution Flow <a class="header-anchor" href="#tool-execution-flow" aria-label="Permalink to &quot;Tool Execution Flow&quot;">​</a></h3><ol><li><strong>Discovery</strong>: Find available tools</li><li><strong>Validation</strong>: Validate parameters against schema</li><li><strong>Execution</strong>: Execute tool with validated parameters</li><li><strong>Result Processing</strong>: Handle tool results and errors</li></ol><h2 id="🌊-streaming-architecture" tabindex="-1">🌊 Streaming Architecture <a class="header-anchor" href="#🌊-streaming-architecture" aria-label="Permalink to &quot;🌊 Streaming Architecture&quot;">​</a></h2><h3 id="provider-agnostic-streaming" tabindex="-1">Provider-Agnostic Streaming <a class="header-anchor" href="#provider-agnostic-streaming" aria-label="Permalink to &quot;Provider-Agnostic Streaming&quot;">​</a></h3><p>Each provider implements streaming through dedicated handlers:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StreamHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  handleChunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  handleError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  handleComplete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="streaming-integration-points" tabindex="-1">Streaming Integration Points <a class="header-anchor" href="#streaming-integration-points" aria-label="Permalink to &quot;Streaming Integration Points&quot;">​</a></h3><ul><li><strong>Real-time Processing</strong>: Chunk-by-chunk response handling</li><li><strong>Tool Integration</strong>: Tool calling within streaming responses</li><li><strong>Error Recovery</strong>: Graceful error handling during streams</li><li><strong>Plugin Events</strong>: Stream events propagated through plugin system</li></ul><h2 id="🔒-type-safety-system" tabindex="-1">🔒 Type Safety System <a class="header-anchor" href="#🔒-type-safety-system" aria-label="Permalink to &quot;🔒 Type Safety System&quot;">​</a></h2><h3 id="generic-type-parameters" tabindex="-1">Generic Type Parameters <a class="header-anchor" href="#generic-type-parameters" aria-label="Permalink to &quot;Generic Type Parameters&quot;">​</a></h3><ul><li><strong>BaseAgent&lt;TConfig, TContext, TMessage&gt;</strong>: Agent configuration and context types</li><li><strong>BaseAIProvider&lt;TConfig, TMessage, TResponse&gt;</strong>: Provider-specific type safety</li><li><strong>BaseTool&lt;TParameters, TResult&gt;</strong>: Tool parameter and result validation</li><li><strong>BasePlugin&lt;TOptions, TStats&gt;</strong>: Plugin configuration and statistics</li></ul><h3 id="dynamic-provider-support" tabindex="-1">Dynamic Provider Support <a class="header-anchor" href="#dynamic-provider-support" aria-label="Permalink to &quot;Dynamic Provider Support&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExtendedRunContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Provider-specific options</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Common options</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  temperature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  maxTokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... other common options</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="type-ownership-system" tabindex="-1">Type Ownership System <a class="header-anchor" href="#type-ownership-system" aria-label="Permalink to &quot;Type Ownership System&quot;">​</a></h3><ul><li><strong>Centralized Types</strong>: Core types in <code>src/interfaces/</code></li><li><strong>Plugin-Specific Types</strong>: Each plugin owns its Options/Stats types</li><li><strong>Export-Based Dependencies</strong>: No type duplication across modules</li></ul><h2 id="📊-analytics-and-monitoring" tabindex="-1">📊 Analytics and Monitoring <a class="header-anchor" href="#📊-analytics-and-monitoring" aria-label="Permalink to &quot;📊 Analytics and Monitoring&quot;">​</a></h2><h3 id="team-integration" tabindex="-1">Team Integration <a class="header-anchor" href="#team-integration" aria-label="Permalink to &quot;Team Integration&quot;">​</a></h3><ul><li><strong>TeamContainer</strong>: Multi-agent orchestration</li><li><strong>Workflow Management</strong>: Complex task coordination</li><li><strong>Performance Aggregation</strong>: Team-wide metrics collection</li></ul><h3 id="plugin-statistics" tabindex="-1">Plugin Statistics <a class="header-anchor" href="#plugin-statistics" aria-label="Permalink to &quot;Plugin Statistics&quot;">​</a></h3><p>Each plugin provides specialized statistics:</p><ul><li><strong>Usage</strong>: API calls, tokens, costs</li><li><strong>Performance</strong>: Response times, resource usage</li><li><strong>Errors</strong>: Error rates and recovery statistics</li><li><strong>Events</strong>: Event emission and handling metrics</li></ul><h2 id="🔄-provider-integration" tabindex="-1">🔄 Provider Integration <a class="header-anchor" href="#🔄-provider-integration" aria-label="Permalink to &quot;🔄 Provider Integration&quot;">​</a></h2><h3 id="universal-message-system" tabindex="-1">Universal Message System <a class="header-anchor" href="#universal-message-system" aria-label="Permalink to &quot;Universal Message System&quot;">​</a></h3><p>All providers convert to/from UniversalMessage format:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UniversalMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;system&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;user&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;assistant&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;tool&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  toolCalls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ToolCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[];</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  metadata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="provider-adapter-pattern" tabindex="-1">Provider Adapter Pattern <a class="header-anchor" href="#provider-adapter-pattern" aria-label="Permalink to &quot;Provider Adapter Pattern&quot;">​</a></h3><p>Each provider implements message conversion:</p><ul><li><strong>OpenAI</strong>: Chat completion format</li><li><strong>Anthropic</strong>: Messages API format</li><li><strong>Google</strong>: Gemini API format</li></ul><h2 id="🏭-factory-patterns" tabindex="-1">🏭 Factory Patterns <a class="header-anchor" href="#🏭-factory-patterns" aria-label="Permalink to &quot;🏭 Factory Patterns&quot;">​</a></h2><h3 id="agent-factory" tabindex="-1">Agent Factory <a class="header-anchor" href="#agent-factory" aria-label="Permalink to &quot;Agent Factory&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AgentFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  createAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AgentConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  createFromTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">templateName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getTemplates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AgentTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="template-system" tabindex="-1">Template System <a class="header-anchor" href="#template-system" aria-label="Permalink to &quot;Template System&quot;">​</a></h3><p>Pre-configured agent templates for common use cases:</p><ul><li><strong>Basic Agent</strong>: Simple conversation agent</li><li><strong>Tool Agent</strong>: Agent with function calling</li><li><strong>Research Agent</strong>: Information gathering specialist</li><li><strong>Writing Agent</strong>: Content creation specialist</li></ul><h2 id="🔧-facade-pattern-implementation" tabindex="-1">🔧 Facade Pattern Implementation <a class="header-anchor" href="#🔧-facade-pattern-implementation" aria-label="Permalink to &quot;🔧 Facade Pattern Implementation&quot;">​</a></h2><p>Several components use the Facade pattern for clean architecture:</p><h3 id="webhook-plugin-facade" tabindex="-1">Webhook Plugin Facade <a class="header-anchor" href="#webhook-plugin-facade" aria-label="Permalink to &quot;Webhook Plugin Facade&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/plugins/webhook/</span></span>
<span class="line"><span>├── types.ts              # Type definitions</span></span>
<span class="line"><span>├── transformer.ts        # Data transformation</span></span>
<span class="line"><span>├── http-client.ts        # HTTP communication</span></span>
<span class="line"><span>├── webhook-plugin.ts     # Main plugin class</span></span>
<span class="line"><span>└── index.ts             # Public interface</span></span></code></pre></div><h3 id="function-tool-facade" tabindex="-1">Function Tool Facade <a class="header-anchor" href="#function-tool-facade" aria-label="Permalink to &quot;Function Tool Facade&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/tools/implementations/function-tool/</span></span>
<span class="line"><span>├── types.ts              # Type definitions</span></span>
<span class="line"><span>├── schema-converter.ts   # Zod schema conversion</span></span>
<span class="line"><span>├── index.ts             # Tool implementation</span></span>
<span class="line"><span>└── function-tool.ts     # Legacy compatibility</span></span></code></pre></div><h3 id="error-handling-facade" tabindex="-1">Error Handling Facade <a class="header-anchor" href="#error-handling-facade" aria-label="Permalink to &quot;Error Handling Facade&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/plugins/error-handling/</span></span>
<span class="line"><span>├── types.ts              # Error type definitions</span></span>
<span class="line"><span>├── context-adapter.ts    # Context adaptation</span></span>
<span class="line"><span>├── error-handling-plugin.ts # Main plugin</span></span>
<span class="line"><span>└── index.ts             # Public interface</span></span></code></pre></div><h2 id="🔍-development-principles" tabindex="-1">🔍 Development Principles <a class="header-anchor" href="#🔍-development-principles" aria-label="Permalink to &quot;🔍 Development Principles&quot;">​</a></h2><h3 id="_1-type-safety-first" tabindex="-1">1. Type Safety First <a class="header-anchor" href="#_1-type-safety-first" aria-label="Permalink to &quot;1. Type Safety First&quot;">​</a></h3><ul><li><strong>No any/unknown</strong>: Strict TypeScript enforcement</li><li><strong>Generic Constraints</strong>: Proper type parameter bounds</li><li><strong>Runtime Validation</strong>: Type guards and schema validation</li></ul><h3 id="_2-modular-design" tabindex="-1">2. Modular Design <a class="header-anchor" href="#_2-modular-design" aria-label="Permalink to &quot;2. Modular Design&quot;">​</a></h3><ul><li><strong>Single Responsibility</strong>: Each module has a clear purpose</li><li><strong>Loose Coupling</strong>: Minimal dependencies between modules</li><li><strong>High Cohesion</strong>: Related functionality grouped together</li></ul><h3 id="_3-extensibility" tabindex="-1">3. Extensibility <a class="header-anchor" href="#_3-extensibility" aria-label="Permalink to &quot;3. Extensibility&quot;">​</a></h3><ul><li><strong>Plugin Architecture</strong>: Easy to add new functionality</li><li><strong>Provider Agnostic</strong>: Support for multiple AI providers</li><li><strong>Tool Ecosystem</strong>: Extensible tool system</li></ul><h3 id="_4-performance" tabindex="-1">4. Performance <a class="header-anchor" href="#_4-performance" aria-label="Permalink to &quot;4. Performance&quot;">​</a></h3><ul><li><strong>Streaming Support</strong>: Real-time response processing</li><li><strong>Parallel Execution</strong>: Concurrent tool calling</li><li><strong>Resource Management</strong>: Efficient memory and CPU usage</li></ul><h3 id="_5-developer-experience" tabindex="-1">5. Developer Experience <a class="header-anchor" href="#_5-developer-experience" aria-label="Permalink to &quot;5. Developer Experience&quot;">​</a></h3><ul><li><strong>TypeScript First</strong>: Full type safety and IntelliSense</li><li><strong>Clear APIs</strong>: Intuitive and consistent interfaces</li><li><strong>Comprehensive Documentation</strong>: Examples and guides</li><li><strong>Testing</strong>: Robust test coverage</li></ul><h2 id="🔧-build-and-development" tabindex="-1">🔧 Build and Development <a class="header-anchor" href="#🔧-build-and-development" aria-label="Permalink to &quot;🔧 Build and Development&quot;">​</a></h2><h3 id="package-structure" tabindex="-1">Package Structure <a class="header-anchor" href="#package-structure" aria-label="Permalink to &quot;Package Structure&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>packages/agents/src/</span></span>
<span class="line"><span>├── abstracts/           # Abstract base classes</span></span>
<span class="line"><span>│   ├── base-agent.ts   # Foundation for all agent implementations</span></span>
<span class="line"><span>│   ├── base-plugin.ts  # Enhanced plugin system with classification</span></span>
<span class="line"><span>│   └── base-module.ts  # Module foundation with lifecycle management</span></span>
<span class="line"><span>├── interfaces/          # Type definitions</span></span>
<span class="line"><span>├── agents/</span></span>
<span class="line"><span>│   ├── robota.ts       # Main agent implementation with module support</span></span>
<span class="line"><span>│   └── robota.test.ts  # Agent tests</span></span>
<span class="line"><span>├── managers/           # Resource managers</span></span>
<span class="line"><span>│   ├── agent-factory.ts         # Agent creation and templates</span></span>
<span class="line"><span>│   ├── module-registry.ts       # Module registration and lifecycle</span></span>
<span class="line"><span>│   └── module-type-registry.ts  # Dynamic module type system</span></span>
<span class="line"><span>├── services/           # Business logic services</span></span>
<span class="line"><span>├── plugins/            # Enhanced plugin system with categories</span></span>
<span class="line"><span>│   ├── conversation-history/    # [STORAGE/HIGH] Conversation storage</span></span>
<span class="line"><span>│   ├── execution/              # [MONITORING/NORMAL] Execution analytics</span></span>
<span class="line"><span>│   ├── logging/                # [LOGGING/HIGH] Structured logging</span></span>
<span class="line"><span>│   ├── performance/            # [MONITORING/NORMAL] System metrics</span></span>
<span class="line"><span>│   ├── usage/                  # [MONITORING/NORMAL] Usage analytics</span></span>
<span class="line"><span>│   ├── error-handling/         # [ERROR_HANDLING/HIGH] Error strategies</span></span>
<span class="line"><span>│   ├── limits/                 # [LIMITS/NORMAL] Rate limiting</span></span>
<span class="line"><span>│   ├── webhook/                # [NOTIFICATION/LOW] HTTP notifications</span></span>
<span class="line"><span>│   └── event-emitter/          # [EVENT/CRITICAL] Event system</span></span>
<span class="line"><span>├── tools/              # Tool system</span></span>
<span class="line"><span>├── utils/              # Utilities</span></span>
<span class="line"><span>└── index.ts           # Public exports</span></span></code></pre></div><h3 id="testing-strategy" tabindex="-1">Testing Strategy <a class="header-anchor" href="#testing-strategy" aria-label="Permalink to &quot;Testing Strategy&quot;">​</a></h3><ul><li><strong>Unit Tests</strong>: Individual component testing</li><li><strong>Integration Tests</strong>: Cross-component functionality</li><li><strong>Type Tests</strong>: TypeScript compilation validation</li><li><strong>Performance Tests</strong>: Benchmarking and optimization</li></ul><h3 id="build-pipeline" tabindex="-1">Build Pipeline <a class="header-anchor" href="#build-pipeline" aria-label="Permalink to &quot;Build Pipeline&quot;">​</a></h3><ul><li><strong>TypeScript Compilation</strong>: Strict type checking</li><li><strong>ESLint</strong>: Code quality and consistency</li><li><strong>Vitest</strong>: Fast unit and integration testing</li><li><strong>TSUp</strong>: Optimized bundling for distribution</li></ul>`,112)]))}const c=i(t,[["render",l]]);export{d as __pageData,c as default};
