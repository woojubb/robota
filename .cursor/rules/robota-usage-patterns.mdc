# Robota SDK Usage Patterns

## Correct Robota Constructor Pattern

### ‚úÖ Current Pattern (v2.0+)
```typescript
import { Robota } from '@robota-sdk/agents';

const robota = new Robota({
  name: 'MyAgent',
  aiProviders: [provider], // Array format
  defaultModel: {
    provider: 'openai',
    model: 'gpt-4',
    systemMessage: 'You are helpful.' // systemMessage here
  },
  tools: [tool1, tool2] // Array of tools
});
```

### ‚ùå Incorrect Patterns
- `aiProviders: { openai: provider }` - Don't use object format
- `currentProvider: 'openai'` - Don't use currentProvider
- `systemPrompt: 'message'` - Use defaultModel.systemMessage
- `toolProviders: [provider]` - Use tools array

## Package Migration

### Deprecated Packages
- `@robota-sdk/core` ‚Üí `@robota-sdk/agents`
- `@robota-sdk/tools` ‚Üí `@robota-sdk/agents`

### Sessions Package Warning
> **üö® Sessions package is experimental and incomplete**. Many methods throw "not implemented" errors. Use `@robota-sdk/agents` directly instead.

## Tool Creation Pattern

### ‚úÖ Current Pattern
```typescript
import { createZodFunctionTool } from '@robota-sdk/agents';

const tool = createZodFunctionTool(
  'toolName',
  'Description',
  zodSchema,
  async (params) => { /* implementation */ }
);
```

### ‚ùå Deprecated Pattern
- `createZodFunctionToolProvider` - Use createZodFunctionTool instead

## Code Review Checklist

1. **Constructor Format**: aiProviders is array, not object
2. **Model Configuration**: Use defaultModel with nested systemMessage
3. **Tool Arrays**: Use tools array instead of toolProviders
4. **Package Imports**: Import from @robota-sdk/agents
5. **Property Names**: Use current property names, not deprecated ones
