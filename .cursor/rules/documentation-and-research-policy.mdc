---
alwaysApply: true
---
# Documentation and Research Policy

## Research-Based Documentation Rules

### API-Specific Behavior Documentation
When implementing provider integrations or external API calls:

1. **Research Before Implementation**
   - Always verify API behavior through official documentation
   - Check community forums and issue trackers for edge cases
   - Test actual API responses to confirm behavior

2. **Document Findings as Code Comments**
   ```typescript
   /**
    * IMPORTANT: [API Name] Specific Behavior
    * ========================================
    * 
    * Based on official documentation and testing:
    * - [Specific behavior 1]
    * - [Specific behavior 2]
    * 
    * Reference: [URL or documentation source]
    * Verified: [Date]
    */
   ```

3. **Critical Implementation Details**
   - Document WHY specific handling is required
   - Include references to official sources
   - Add verification date for time-sensitive behaviors

### Preventing Implementation Reversals

1. **Document Design Decisions**
   - When making architectural choices, document the reasoning
   - Include alternatives considered and why they were rejected
   - Reference any external constraints or requirements

2. **Mark Verified Behaviors**
   ```typescript
   // VERIFIED: This behavior is required by [API/System] as of [Date]
   // DO NOT CHANGE without verifying current API requirements
   ```

3. **Use Warning Comments**
   ```typescript
   // WARNING: Changing this will break [specific functionality]
   // See: [reference to documentation or issue]
   ```

### Code Comment Standards

1. **Provider-Specific Rules**
   - Document at the class level for provider implementations
   - Include API version compatibility information
   - List any known limitations or quirks

2. **Method-Level Documentation**
   - Document non-obvious parameter handling
   - Explain any data transformations required
   - Note any side effects or state changes

3. **Inline Comments for Complex Logic**
   - Explain WHY, not WHAT the code does
   - Reference external requirements or constraints
   - Include examples for complex transformations

### Research Documentation Format

```typescript
/**
 * [Component/Feature Name]
 * 
 * RESEARCH FINDINGS:
 * ==================
 * 
 * 1. [Finding 1]
 *    - Source: [URL/Documentation]
 *    - Verified: [Date]
 *    - Impact: [How this affects implementation]
 * 
 * 2. [Finding 2]
 *    - Source: [URL/Documentation]
 *    - Verified: [Date]
 *    - Impact: [How this affects implementation]
 * 
 * IMPLEMENTATION NOTES:
 * ====================
 * - [Critical implementation detail 1]
 * - [Critical implementation detail 2]
 * 
 * DO NOT MODIFY WITHOUT:
 * - Checking current API documentation
 * - Testing with actual API
 * - Updating this documentation
 */
```

### Version-Specific Behaviors

When behavior depends on API or library versions:

```typescript
// API Version: 2.0.0
// Behavior: [Specific behavior for this version]
// Migration Note: [What changes in next version]
```

### Edge Case Documentation

Document discovered edge cases immediately:

```typescript
// EDGE CASE: [Description]
// Occurs when: [Conditions]
// Solution: [How it's handled]
// Discovered: [Date/Issue reference]
```
