# TypeScript Strict Type Safety Policy

## Core Rules

### 1. Prohibited Types
- **NO `any` types** - Use specific types, generics, or union types
- **NO `unknown` types** - Define exact types or use type guards
- **NO `object` types** - Use specific interfaces or Record<K, V>
- **NO implicit `any`** - All parameters must have explicit types
- **NO type assertions with `as any`**
- **NO `@ts-ignore` or `@ts-nocheck` comments**

### 2. Required Alternatives
- **Specific interfaces** instead of any/unknown
- **Union types** for multiple possible types
- **Generic constraints** for flexible but safe typing
- **Type guards** for runtime type checking
- **Branded types** for domain-specific values

### 3. Type Declaration Requirements
- All function parameters must have explicit types
- All function return types must be declared
- All class properties must have explicit types
- All exported constants must have explicit types

### 4. Configuration Protection
- TypeScript strict rules in tsconfig.base.json are immutable
- ESLint type safety rules are error-level and immutable
- Zero tolerance policy enforced at build time

### 5. Exception Process
- Any use of prohibited types requires explicit user consent
- Must document reason and get approval before implementation
- Propose type-safe alternatives first
