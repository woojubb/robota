# Dependency Architecture Rules

## Strict Prohibition: Circular Dependencies
- **NO circular dependencies** between packages
- Provider packages **MUST NOT** depend on agents package
- Core packages **MUST NOT** depend on higher-level packages

## Package Hierarchy (Dependency Direction)
```
External Dependencies (npm packages)
         ↑
Provider Packages (@robota-sdk/openai, @robota-sdk/anthropic, @robota-sdk/google)
         ↑
Core Package (@robota-sdk/agents)
         ↑
Higher-Level Packages (@robota-sdk/sessions, @robota-sdk/team)
```

## Dependency Rules by Package Type

### Provider Packages (openai, anthropic, google)
- **CAN depend on**: External npm packages only
- **CANNOT depend on**: Any @robota-sdk/* packages
- **Purpose**: Isolated AI provider implementations

### Core Package (agents)
- **CAN depend on**: Provider packages (as peerDependencies), external npm packages
- **CANNOT depend on**: @robota-sdk/sessions, @robota-sdk/team
- **Purpose**: Core agent functionality, plugin system

### Higher-Level Packages (sessions, team)
- **CAN depend on**: @robota-sdk/agents, provider packages, external npm packages
- **CANNOT depend on**: Each other
- **Purpose**: Advanced features built on core agents

## Integration Patterns
- **Dependency Injection**: Inject providers at runtime, not build time
- **Interface-based**: Providers implement interfaces defined in agents
- **Plugin System**: Register providers as plugins
- **Event System**: Use events for loose coupling

## Enforcement
- Build failures for circular dependencies
- CI/CD validation of dependency graph
- PR rejection for violations
