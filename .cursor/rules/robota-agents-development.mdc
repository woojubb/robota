---
description:
globs:
alwaysApply: false
---
# Robota Agents Development Rules

## Project Structure Rules

### Package Organization
- **[packages/agents/src/interfaces/](mdc:packages/agents/src/interfaces/)** - Type definitions and contracts
- **[packages/agents/src/abstracts/](mdc:packages/agents/src/abstracts/)** - Base classes and abstract implementations
- **[packages/agents/src/managers/](mdc:packages/agents/src/managers/)** - Resource and lifecycle management
- **[packages/agents/src/plugins/](mdc:packages/agents/src/plugins/)** - Modular functionality extensions
- **[packages/agents/src/tools/](mdc:packages/agents/src/tools/)** - Tool implementations and registry
- **[packages/agents/src/services/](mdc:packages/agents/src/services/)** - Core business logic services

### Import/Export Rules
```typescript
// ✅ CORRECT: Use proper relative imports
import { BasePlugin } from '../../abstracts/base-plugin';
import type { ToolParameters } from '../../interfaces/tool';

// ❌ FORBIDDEN: Cross-package direct imports
import { SomeType } from '../../../openai/src/types'; // VIOLATION
```

## Plugin Development Rules

### Plugin Interface Compliance
All plugins must extend [BasePlugin](mdc:packages/agents/src/abstracts/base-plugin.ts):

```typescript
export class MyPlugin extends BasePlugin {
  name = 'MyPlugin';
  version = '1.0.0';
  
  // Override specific lifecycle methods as needed
  override async beforeRun(input: string, options?: RunOptions): Promise<void> {
    // Implementation
  }
}
```

### Plugin Statistics
Each plugin must define its own statistics interface:

```typescript
export interface MyPluginStats {
  totalOperations: number;
  successRate: number;
  averageProcessingTime: number;
}

// Implement getStats method
getStats(): MyPluginStats {
  return {
    totalOperations: this.operationCount,
    successRate: this.calculateSuccessRate(),
    averageProcessingTime: this.calculateAverageTime()
  };
}
```

## Tool Development Rules

### Tool Interface Compliance
All tools must implement [ToolInterface](mdc:packages/agents/src/interfaces/tool.ts):

```typescript
export class MyTool extends BaseTool implements ToolInterface {
  readonly schema: ToolSchema;
  
  async execute(parameters: ToolParameters, context?: ToolExecutionContext): Promise<ToolResult> {
    // Implementation must return ToolResult
  }
}
```

### Tool Registry Integration
Tools must be registered through [ToolRegistry](mdc:packages/agents/src/tools/registry/tool-registry.ts):

```typescript
// Register tool with proper schema
toolRegistry.registerTool('myTool', myToolInstance, myToolSchema);
```

## Manager Development Rules

### Resource Management
Managers must implement proper lifecycle management:

```typescript
export class MyManager extends BaseManager {
  async initialize(): Promise<void> {
    // Initialize resources
  }
  
  async cleanup(): Promise<void> {
    // Clean up resources
  }
  
  async destroy(): Promise<void> {
    // Destroy manager instance
  }
}
```

### State Management
Managers must maintain consistent state:

```typescript
// Use private properties for internal state
private readonly internalState: Map<string, any> = new Map();

// Provide public read-only access
public getState(): ReadonlyMap<string, any> {
  return this.internalState;
}
```

## Error Handling Rules

### Error Types
Use specific error types from [errors.ts](mdc:packages/agents/src/utils/errors.ts):

```typescript
import { ToolExecutionError, ConfigurationError, NetworkError } from '../utils/errors';

// Throw appropriate error types
throw new ToolExecutionError('Tool execution failed', toolName, originalError);
```

### Error Context
Provide meaningful error context:

```typescript
throw new ConfigurationError('Invalid configuration provided', {
  providedConfig: config,
  expectedProperties: ['apiKey', 'endpoint'],
  validation: validationErrors
});
```

## Logging Rules

### Logger Usage
Use structured logging from [logger.ts](mdc:packages/agents/src/utils/logger.ts):

```typescript
import { createLogger } from '../utils/logger';

const logger = createLogger('MyClass');

logger.info('Operation completed', {
  operationId: 'op-123',
  duration: 150,
  status: 'success'
});
```

### Log Levels
Follow log level conventions:
- `debug`: Detailed diagnostic information
- `info`: General operational information
- `warn`: Warning conditions that should be addressed
- `error`: Error conditions that need immediate attention

## Testing Rules

### Test File Organization
```typescript
// Test files should mirror source structure
// packages/agents/src/plugins/my-plugin.ts
// packages/agents/src/plugins/my-plugin.test.ts
```

### Test Coverage Requirements
- All public methods must have tests
- Error conditions must be tested
- Integration points must have integration tests

### Mock Usage
Use proper mocking for external dependencies:

```typescript
// Mock external services
const mockProvider = {
  chat: vi.fn().mockResolvedValue(mockResponse)
};

// Test with mocked dependencies
await agent.run('test input', { provider: mockProvider });
```

## Code Quality Rules

### ESLint Compliance
All code must pass ESLint validation:

```bash
pnpm lint
```

### TypeScript Strict Mode
Code must compile with strict TypeScript settings:
- `strict: true`
- `exactOptionalPropertyTypes: true`
- `noImplicitReturns: true`

### Documentation Requirements
- All public classes must have JSDoc comments
- All public methods must document parameters and return values
- Complex algorithms must include inline comments

## Build and Deployment Rules

### Build Process
```bash
# Development build
pnpm build:dev

# Production build  
pnpm build

# Type checking
pnpm type-check
```

### Package Publishing
- Version numbers must follow semver
- Changelog must be updated for each release
- All tests must pass before publishing

## Compatibility Rules

### Provider Package Compatibility
Agents package must maintain compatibility with:
- **[packages/openai/](mdc:packages/openai/)** - OpenAI provider integration
- **[packages/anthropic/](mdc:packages/anthropic/)** - Anthropic provider integration
- **[packages/google/](mdc:packages/google/)** - Google provider integration
- **[packages/team/](mdc:packages/team/)** - Team collaboration features
- **[packages/sessions/](mdc:packages/sessions/)** - Session management

### Breaking Changes
Breaking changes require:
- Major version bump
- Migration guide documentation
- Deprecation notices in previous version
